

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "QNZ.Data\App.config"
//     Connection String Name: "QNZDbContext"
//     Connection String:      "data source=.;initial catalog=TZGCMSDB;persist security info=True;user id=sa;password=**zapped**;;multipleactiveresultsets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Express Edition (64-bit)
// Database Engine Edition : Express
// Database Version        : 12.0.2269.0

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace QNZ.Data
{
    using System.Linq;

    #region Unit of work

    public interface IQNZDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Achievement> Achievements { get; set; } // Achievements
        System.Data.Entity.DbSet<AchievementCategory> AchievementCategories { get; set; } // AchievementCategories
        System.Data.Entity.DbSet<Album> Albums { get; set; } // Albums
        System.Data.Entity.DbSet<AnnouncementSet> AnnouncementSets { get; set; } // AnnouncementSet
        System.Data.Entity.DbSet<Article> Articles { get; set; } // Articles
        System.Data.Entity.DbSet<ArticleCategory> ArticleCategories { get; set; } // ArticleCategories
        System.Data.Entity.DbSet<CarouselSet> CarouselSets { get; set; } // CarouselSet
        System.Data.Entity.DbSet<CartSet> CartSets { get; set; } // CartSet
        System.Data.Entity.DbSet<Case> Cases { get; set; } // Cases
        System.Data.Entity.DbSet<ChronicleSet> ChronicleSets { get; set; } // ChronicleSet
        System.Data.Entity.DbSet<ClientSet> ClientSets { get; set; } // ClientSet
        System.Data.Entity.DbSet<CommentSet> CommentSets { get; set; } // CommentSet
        System.Data.Entity.DbSet<Dictionary> Dictionaries { get; set; } // Dictionaries
        System.Data.Entity.DbSet<DictionaryType> DictionaryTypes { get; set; } // DictionaryTypes
        System.Data.Entity.DbSet<DocumentCategorySet> DocumentCategorySets { get; set; } // DocumentCategorySet
        System.Data.Entity.DbSet<DocumentSet> DocumentSets { get; set; } // DocumentSet
        System.Data.Entity.DbSet<EmailAccountSet> EmailAccountSets { get; set; } // EmailAccountSet
        System.Data.Entity.DbSet<EmailSet> EmailSets { get; set; } // EmailSet
        System.Data.Entity.DbSet<EmailTemplateSet> EmailTemplateSets { get; set; } // EmailTemplateSet
        System.Data.Entity.DbSet<FilterTemplateSet> FilterTemplateSets { get; set; } // FilterTemplateSet
        System.Data.Entity.DbSet<GoodsCategorySet> GoodsCategorySets { get; set; } // GoodsCategorySet
        System.Data.Entity.DbSet<GoodsPhotoSet> GoodsPhotoSets { get; set; } // GoodsPhotoSet
        System.Data.Entity.DbSet<GoodsSet> GoodsSets { get; set; } // GoodsSet
        System.Data.Entity.DbSet<Institute> Institutes { get; set; } // Institutes
        System.Data.Entity.DbSet<Job> Jobs { get; set; } // Jobs
        System.Data.Entity.DbSet<Laboratory> Laboratories { get; set; } // Laboratories
        System.Data.Entity.DbSet<LinkCategorySet> LinkCategorySets { get; set; } // LinkCategorySet
        System.Data.Entity.DbSet<LinkSet> LinkSets { get; set; } // LinkSet
        System.Data.Entity.DbSet<Log> Logs { get; set; } // Logs
        System.Data.Entity.DbSet<MenuCategorySet> MenuCategorySets { get; set; } // MenuCategorySet
        System.Data.Entity.DbSet<MenuSet> MenuSets { get; set; } // MenuSet
        System.Data.Entity.DbSet<OrderDetailSet> OrderDetailSets { get; set; } // OrderDetailSet
        System.Data.Entity.DbSet<OrderSet> OrderSets { get; set; } // OrderSet
        System.Data.Entity.DbSet<Outlet> Outlets { get; set; } // Outlets
        System.Data.Entity.DbSet<PageMeta> PageMetas { get; set; } // PageMetas
        System.Data.Entity.DbSet<PageSet> PageSets { get; set; } // PageSet
        System.Data.Entity.DbSet<Photo> Photos { get; set; } // Photos
        System.Data.Entity.DbSet<PositionSet> PositionSets { get; set; } // PositionSet
        System.Data.Entity.DbSet<PostCategorySet> PostCategorySets { get; set; } // PostCategorySet
        System.Data.Entity.DbSet<PostSet> PostSets { get; set; } // PostSet
        System.Data.Entity.DbSet<Product> Products { get; set; } // Products
        System.Data.Entity.DbSet<ProductCategory> ProductCategories { get; set; } // ProductCategories
        System.Data.Entity.DbSet<ProductPhotoSet> ProductPhotoSets { get; set; } // ProductPhotoSet
        System.Data.Entity.DbSet<QuestionCategorySet> QuestionCategorySets { get; set; } // QuestionCategorySet
        System.Data.Entity.DbSet<QuestionSet> QuestionSets { get; set; } // QuestionSet
        System.Data.Entity.DbSet<RecipientInfoSet> RecipientInfoSets { get; set; } // RecipientInfoSet
        System.Data.Entity.DbSet<ReservationSet> ReservationSets { get; set; } // ReservationSet
        System.Data.Entity.DbSet<Role> Roles { get; set; } // Roles
        System.Data.Entity.DbSet<SimpleProduct> SimpleProducts { get; set; } // SimpleProducts
        System.Data.Entity.DbSet<SolutionSet> SolutionSets { get; set; } // SolutionSet
        System.Data.Entity.DbSet<TCity> TCities { get; set; } // T_City
        System.Data.Entity.DbSet<TDistrict> TDistricts { get; set; } // T_District
        System.Data.Entity.DbSet<TeamSet> TeamSets { get; set; } // TeamSet
        System.Data.Entity.DbSet<TechnologySet> TechnologySets { get; set; } // TechnologySet
        System.Data.Entity.DbSet<TProvince> TProvinces { get; set; } // T_Province
        System.Data.Entity.DbSet<User> Users { get; set; } // Users
        System.Data.Entity.DbSet<UserSafetySet> UserSafetySets { get; set; } // UserSafetySet
        System.Data.Entity.DbSet<VideoCategorySet> VideoCategorySets { get; set; } // VideoCategorySet
        System.Data.Entity.DbSet<VideoSet> VideoSets { get; set; } // VideoSet
        System.Data.Entity.DbSet<WorkCategorySet> WorkCategorySets { get; set; } // WorkCategorySet
        System.Data.Entity.DbSet<WorkSet> WorkSets { get; set; } // WorkSet

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class QNZDbContext : System.Data.Entity.DbContext, IQNZDbContext
    {
        public System.Data.Entity.DbSet<Achievement> Achievements { get; set; } // Achievements
        public System.Data.Entity.DbSet<AchievementCategory> AchievementCategories { get; set; } // AchievementCategories
        public System.Data.Entity.DbSet<Album> Albums { get; set; } // Albums
        public System.Data.Entity.DbSet<AnnouncementSet> AnnouncementSets { get; set; } // AnnouncementSet
        public System.Data.Entity.DbSet<Article> Articles { get; set; } // Articles
        public System.Data.Entity.DbSet<ArticleCategory> ArticleCategories { get; set; } // ArticleCategories
        public System.Data.Entity.DbSet<CarouselSet> CarouselSets { get; set; } // CarouselSet
        public System.Data.Entity.DbSet<CartSet> CartSets { get; set; } // CartSet
        public System.Data.Entity.DbSet<Case> Cases { get; set; } // Cases
        public System.Data.Entity.DbSet<ChronicleSet> ChronicleSets { get; set; } // ChronicleSet
        public System.Data.Entity.DbSet<ClientSet> ClientSets { get; set; } // ClientSet
        public System.Data.Entity.DbSet<CommentSet> CommentSets { get; set; } // CommentSet
        public System.Data.Entity.DbSet<Dictionary> Dictionaries { get; set; } // Dictionaries
        public System.Data.Entity.DbSet<DictionaryType> DictionaryTypes { get; set; } // DictionaryTypes
        public System.Data.Entity.DbSet<DocumentCategorySet> DocumentCategorySets { get; set; } // DocumentCategorySet
        public System.Data.Entity.DbSet<DocumentSet> DocumentSets { get; set; } // DocumentSet
        public System.Data.Entity.DbSet<EmailAccountSet> EmailAccountSets { get; set; } // EmailAccountSet
        public System.Data.Entity.DbSet<EmailSet> EmailSets { get; set; } // EmailSet
        public System.Data.Entity.DbSet<EmailTemplateSet> EmailTemplateSets { get; set; } // EmailTemplateSet
        public System.Data.Entity.DbSet<FilterTemplateSet> FilterTemplateSets { get; set; } // FilterTemplateSet
        public System.Data.Entity.DbSet<GoodsCategorySet> GoodsCategorySets { get; set; } // GoodsCategorySet
        public System.Data.Entity.DbSet<GoodsPhotoSet> GoodsPhotoSets { get; set; } // GoodsPhotoSet
        public System.Data.Entity.DbSet<GoodsSet> GoodsSets { get; set; } // GoodsSet
        public System.Data.Entity.DbSet<Institute> Institutes { get; set; } // Institutes
        public System.Data.Entity.DbSet<Job> Jobs { get; set; } // Jobs
        public System.Data.Entity.DbSet<Laboratory> Laboratories { get; set; } // Laboratories
        public System.Data.Entity.DbSet<LinkCategorySet> LinkCategorySets { get; set; } // LinkCategorySet
        public System.Data.Entity.DbSet<LinkSet> LinkSets { get; set; } // LinkSet
        public System.Data.Entity.DbSet<Log> Logs { get; set; } // Logs
        public System.Data.Entity.DbSet<MenuCategorySet> MenuCategorySets { get; set; } // MenuCategorySet
        public System.Data.Entity.DbSet<MenuSet> MenuSets { get; set; } // MenuSet
        public System.Data.Entity.DbSet<OrderDetailSet> OrderDetailSets { get; set; } // OrderDetailSet
        public System.Data.Entity.DbSet<OrderSet> OrderSets { get; set; } // OrderSet
        public System.Data.Entity.DbSet<Outlet> Outlets { get; set; } // Outlets
        public System.Data.Entity.DbSet<PageMeta> PageMetas { get; set; } // PageMetas
        public System.Data.Entity.DbSet<PageSet> PageSets { get; set; } // PageSet
        public System.Data.Entity.DbSet<Photo> Photos { get; set; } // Photos
        public System.Data.Entity.DbSet<PositionSet> PositionSets { get; set; } // PositionSet
        public System.Data.Entity.DbSet<PostCategorySet> PostCategorySets { get; set; } // PostCategorySet
        public System.Data.Entity.DbSet<PostSet> PostSets { get; set; } // PostSet
        public System.Data.Entity.DbSet<Product> Products { get; set; } // Products
        public System.Data.Entity.DbSet<ProductCategory> ProductCategories { get; set; } // ProductCategories
        public System.Data.Entity.DbSet<ProductPhotoSet> ProductPhotoSets { get; set; } // ProductPhotoSet
        public System.Data.Entity.DbSet<QuestionCategorySet> QuestionCategorySets { get; set; } // QuestionCategorySet
        public System.Data.Entity.DbSet<QuestionSet> QuestionSets { get; set; } // QuestionSet
        public System.Data.Entity.DbSet<RecipientInfoSet> RecipientInfoSets { get; set; } // RecipientInfoSet
        public System.Data.Entity.DbSet<ReservationSet> ReservationSets { get; set; } // ReservationSet
        public System.Data.Entity.DbSet<Role> Roles { get; set; } // Roles
        public System.Data.Entity.DbSet<SimpleProduct> SimpleProducts { get; set; } // SimpleProducts
        public System.Data.Entity.DbSet<SolutionSet> SolutionSets { get; set; } // SolutionSet
        public System.Data.Entity.DbSet<TCity> TCities { get; set; } // T_City
        public System.Data.Entity.DbSet<TDistrict> TDistricts { get; set; } // T_District
        public System.Data.Entity.DbSet<TeamSet> TeamSets { get; set; } // TeamSet
        public System.Data.Entity.DbSet<TechnologySet> TechnologySets { get; set; } // TechnologySet
        public System.Data.Entity.DbSet<TProvince> TProvinces { get; set; } // T_Province
        public System.Data.Entity.DbSet<User> Users { get; set; } // Users
        public System.Data.Entity.DbSet<UserSafetySet> UserSafetySets { get; set; } // UserSafetySet
        public System.Data.Entity.DbSet<VideoCategorySet> VideoCategorySets { get; set; } // VideoCategorySet
        public System.Data.Entity.DbSet<VideoSet> VideoSets { get; set; } // VideoSet
        public System.Data.Entity.DbSet<WorkCategorySet> WorkCategorySets { get; set; } // WorkCategorySet
        public System.Data.Entity.DbSet<WorkSet> WorkSets { get; set; } // WorkSet

        static QNZDbContext()
        {
            System.Data.Entity.Database.SetInitializer<QNZDbContext>(null);
        }

        public QNZDbContext()
            : base("Name=QNZDbContext")
        {
        }

        public QNZDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public QNZDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public QNZDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public QNZDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        public QNZDbContext(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AchievementConfiguration());
            modelBuilder.Configurations.Add(new AchievementCategoryConfiguration());
            modelBuilder.Configurations.Add(new AlbumConfiguration());
            modelBuilder.Configurations.Add(new AnnouncementSetConfiguration());
            modelBuilder.Configurations.Add(new ArticleConfiguration());
            modelBuilder.Configurations.Add(new ArticleCategoryConfiguration());
            modelBuilder.Configurations.Add(new CarouselSetConfiguration());
            modelBuilder.Configurations.Add(new CartSetConfiguration());
            modelBuilder.Configurations.Add(new CaseConfiguration());
            modelBuilder.Configurations.Add(new ChronicleSetConfiguration());
            modelBuilder.Configurations.Add(new ClientSetConfiguration());
            modelBuilder.Configurations.Add(new CommentSetConfiguration());
            modelBuilder.Configurations.Add(new DictionaryConfiguration());
            modelBuilder.Configurations.Add(new DictionaryTypeConfiguration());
            modelBuilder.Configurations.Add(new DocumentCategorySetConfiguration());
            modelBuilder.Configurations.Add(new DocumentSetConfiguration());
            modelBuilder.Configurations.Add(new EmailAccountSetConfiguration());
            modelBuilder.Configurations.Add(new EmailSetConfiguration());
            modelBuilder.Configurations.Add(new EmailTemplateSetConfiguration());
            modelBuilder.Configurations.Add(new FilterTemplateSetConfiguration());
            modelBuilder.Configurations.Add(new GoodsCategorySetConfiguration());
            modelBuilder.Configurations.Add(new GoodsPhotoSetConfiguration());
            modelBuilder.Configurations.Add(new GoodsSetConfiguration());
            modelBuilder.Configurations.Add(new InstituteConfiguration());
            modelBuilder.Configurations.Add(new JobConfiguration());
            modelBuilder.Configurations.Add(new LaboratoryConfiguration());
            modelBuilder.Configurations.Add(new LinkCategorySetConfiguration());
            modelBuilder.Configurations.Add(new LinkSetConfiguration());
            modelBuilder.Configurations.Add(new LogConfiguration());
            modelBuilder.Configurations.Add(new MenuCategorySetConfiguration());
            modelBuilder.Configurations.Add(new MenuSetConfiguration());
            modelBuilder.Configurations.Add(new OrderDetailSetConfiguration());
            modelBuilder.Configurations.Add(new OrderSetConfiguration());
            modelBuilder.Configurations.Add(new OutletConfiguration());
            modelBuilder.Configurations.Add(new PageMetaConfiguration());
            modelBuilder.Configurations.Add(new PageSetConfiguration());
            modelBuilder.Configurations.Add(new PhotoConfiguration());
            modelBuilder.Configurations.Add(new PositionSetConfiguration());
            modelBuilder.Configurations.Add(new PostCategorySetConfiguration());
            modelBuilder.Configurations.Add(new PostSetConfiguration());
            modelBuilder.Configurations.Add(new ProductConfiguration());
            modelBuilder.Configurations.Add(new ProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new ProductPhotoSetConfiguration());
            modelBuilder.Configurations.Add(new QuestionCategorySetConfiguration());
            modelBuilder.Configurations.Add(new QuestionSetConfiguration());
            modelBuilder.Configurations.Add(new RecipientInfoSetConfiguration());
            modelBuilder.Configurations.Add(new ReservationSetConfiguration());
            modelBuilder.Configurations.Add(new RoleConfiguration());
            modelBuilder.Configurations.Add(new SimpleProductConfiguration());
            modelBuilder.Configurations.Add(new SolutionSetConfiguration());
            modelBuilder.Configurations.Add(new TCityConfiguration());
            modelBuilder.Configurations.Add(new TDistrictConfiguration());
            modelBuilder.Configurations.Add(new TeamSetConfiguration());
            modelBuilder.Configurations.Add(new TechnologySetConfiguration());
            modelBuilder.Configurations.Add(new TProvinceConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new UserSafetySetConfiguration());
            modelBuilder.Configurations.Add(new VideoCategorySetConfiguration());
            modelBuilder.Configurations.Add(new VideoSetConfiguration());
            modelBuilder.Configurations.Add(new WorkCategorySetConfiguration());
            modelBuilder.Configurations.Add(new WorkSetConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AchievementConfiguration(schema));
            modelBuilder.Configurations.Add(new AchievementCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new AlbumConfiguration(schema));
            modelBuilder.Configurations.Add(new AnnouncementSetConfiguration(schema));
            modelBuilder.Configurations.Add(new ArticleConfiguration(schema));
            modelBuilder.Configurations.Add(new ArticleCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new CarouselSetConfiguration(schema));
            modelBuilder.Configurations.Add(new CartSetConfiguration(schema));
            modelBuilder.Configurations.Add(new CaseConfiguration(schema));
            modelBuilder.Configurations.Add(new ChronicleSetConfiguration(schema));
            modelBuilder.Configurations.Add(new ClientSetConfiguration(schema));
            modelBuilder.Configurations.Add(new CommentSetConfiguration(schema));
            modelBuilder.Configurations.Add(new DictionaryConfiguration(schema));
            modelBuilder.Configurations.Add(new DictionaryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentCategorySetConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentSetConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailAccountSetConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailSetConfiguration(schema));
            modelBuilder.Configurations.Add(new EmailTemplateSetConfiguration(schema));
            modelBuilder.Configurations.Add(new FilterTemplateSetConfiguration(schema));
            modelBuilder.Configurations.Add(new GoodsCategorySetConfiguration(schema));
            modelBuilder.Configurations.Add(new GoodsPhotoSetConfiguration(schema));
            modelBuilder.Configurations.Add(new GoodsSetConfiguration(schema));
            modelBuilder.Configurations.Add(new InstituteConfiguration(schema));
            modelBuilder.Configurations.Add(new JobConfiguration(schema));
            modelBuilder.Configurations.Add(new LaboratoryConfiguration(schema));
            modelBuilder.Configurations.Add(new LinkCategorySetConfiguration(schema));
            modelBuilder.Configurations.Add(new LinkSetConfiguration(schema));
            modelBuilder.Configurations.Add(new LogConfiguration(schema));
            modelBuilder.Configurations.Add(new MenuCategorySetConfiguration(schema));
            modelBuilder.Configurations.Add(new MenuSetConfiguration(schema));
            modelBuilder.Configurations.Add(new OrderDetailSetConfiguration(schema));
            modelBuilder.Configurations.Add(new OrderSetConfiguration(schema));
            modelBuilder.Configurations.Add(new OutletConfiguration(schema));
            modelBuilder.Configurations.Add(new PageMetaConfiguration(schema));
            modelBuilder.Configurations.Add(new PageSetConfiguration(schema));
            modelBuilder.Configurations.Add(new PhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new PositionSetConfiguration(schema));
            modelBuilder.Configurations.Add(new PostCategorySetConfiguration(schema));
            modelBuilder.Configurations.Add(new PostSetConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductPhotoSetConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionCategorySetConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionSetConfiguration(schema));
            modelBuilder.Configurations.Add(new RecipientInfoSetConfiguration(schema));
            modelBuilder.Configurations.Add(new ReservationSetConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleConfiguration(schema));
            modelBuilder.Configurations.Add(new SimpleProductConfiguration(schema));
            modelBuilder.Configurations.Add(new SolutionSetConfiguration(schema));
            modelBuilder.Configurations.Add(new TCityConfiguration(schema));
            modelBuilder.Configurations.Add(new TDistrictConfiguration(schema));
            modelBuilder.Configurations.Add(new TeamSetConfiguration(schema));
            modelBuilder.Configurations.Add(new TechnologySetConfiguration(schema));
            modelBuilder.Configurations.Add(new TProvinceConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new UserSafetySetConfiguration(schema));
            modelBuilder.Configurations.Add(new VideoCategorySetConfiguration(schema));
            modelBuilder.Configurations.Add(new VideoSetConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkCategorySetConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkSetConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class QNZDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<QNZDbContext>
    {
        public QNZDbContext Create()
        {
            return new QNZDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FakeQNZDbContext : IQNZDbContext
    {
        public System.Data.Entity.DbSet<Achievement> Achievements { get; set; }
        public System.Data.Entity.DbSet<AchievementCategory> AchievementCategories { get; set; }
        public System.Data.Entity.DbSet<Album> Albums { get; set; }
        public System.Data.Entity.DbSet<AnnouncementSet> AnnouncementSets { get; set; }
        public System.Data.Entity.DbSet<Article> Articles { get; set; }
        public System.Data.Entity.DbSet<ArticleCategory> ArticleCategories { get; set; }
        public System.Data.Entity.DbSet<CarouselSet> CarouselSets { get; set; }
        public System.Data.Entity.DbSet<CartSet> CartSets { get; set; }
        public System.Data.Entity.DbSet<Case> Cases { get; set; }
        public System.Data.Entity.DbSet<ChronicleSet> ChronicleSets { get; set; }
        public System.Data.Entity.DbSet<ClientSet> ClientSets { get; set; }
        public System.Data.Entity.DbSet<CommentSet> CommentSets { get; set; }
        public System.Data.Entity.DbSet<Dictionary> Dictionaries { get; set; }
        public System.Data.Entity.DbSet<DictionaryType> DictionaryTypes { get; set; }
        public System.Data.Entity.DbSet<DocumentCategorySet> DocumentCategorySets { get; set; }
        public System.Data.Entity.DbSet<DocumentSet> DocumentSets { get; set; }
        public System.Data.Entity.DbSet<EmailAccountSet> EmailAccountSets { get; set; }
        public System.Data.Entity.DbSet<EmailSet> EmailSets { get; set; }
        public System.Data.Entity.DbSet<EmailTemplateSet> EmailTemplateSets { get; set; }
        public System.Data.Entity.DbSet<FilterTemplateSet> FilterTemplateSets { get; set; }
        public System.Data.Entity.DbSet<GoodsCategorySet> GoodsCategorySets { get; set; }
        public System.Data.Entity.DbSet<GoodsPhotoSet> GoodsPhotoSets { get; set; }
        public System.Data.Entity.DbSet<GoodsSet> GoodsSets { get; set; }
        public System.Data.Entity.DbSet<Institute> Institutes { get; set; }
        public System.Data.Entity.DbSet<Job> Jobs { get; set; }
        public System.Data.Entity.DbSet<Laboratory> Laboratories { get; set; }
        public System.Data.Entity.DbSet<LinkCategorySet> LinkCategorySets { get; set; }
        public System.Data.Entity.DbSet<LinkSet> LinkSets { get; set; }
        public System.Data.Entity.DbSet<Log> Logs { get; set; }
        public System.Data.Entity.DbSet<MenuCategorySet> MenuCategorySets { get; set; }
        public System.Data.Entity.DbSet<MenuSet> MenuSets { get; set; }
        public System.Data.Entity.DbSet<OrderDetailSet> OrderDetailSets { get; set; }
        public System.Data.Entity.DbSet<OrderSet> OrderSets { get; set; }
        public System.Data.Entity.DbSet<Outlet> Outlets { get; set; }
        public System.Data.Entity.DbSet<PageMeta> PageMetas { get; set; }
        public System.Data.Entity.DbSet<PageSet> PageSets { get; set; }
        public System.Data.Entity.DbSet<Photo> Photos { get; set; }
        public System.Data.Entity.DbSet<PositionSet> PositionSets { get; set; }
        public System.Data.Entity.DbSet<PostCategorySet> PostCategorySets { get; set; }
        public System.Data.Entity.DbSet<PostSet> PostSets { get; set; }
        public System.Data.Entity.DbSet<Product> Products { get; set; }
        public System.Data.Entity.DbSet<ProductCategory> ProductCategories { get; set; }
        public System.Data.Entity.DbSet<ProductPhotoSet> ProductPhotoSets { get; set; }
        public System.Data.Entity.DbSet<QuestionCategorySet> QuestionCategorySets { get; set; }
        public System.Data.Entity.DbSet<QuestionSet> QuestionSets { get; set; }
        public System.Data.Entity.DbSet<RecipientInfoSet> RecipientInfoSets { get; set; }
        public System.Data.Entity.DbSet<ReservationSet> ReservationSets { get; set; }
        public System.Data.Entity.DbSet<Role> Roles { get; set; }
        public System.Data.Entity.DbSet<SimpleProduct> SimpleProducts { get; set; }
        public System.Data.Entity.DbSet<SolutionSet> SolutionSets { get; set; }
        public System.Data.Entity.DbSet<TCity> TCities { get; set; }
        public System.Data.Entity.DbSet<TDistrict> TDistricts { get; set; }
        public System.Data.Entity.DbSet<TeamSet> TeamSets { get; set; }
        public System.Data.Entity.DbSet<TechnologySet> TechnologySets { get; set; }
        public System.Data.Entity.DbSet<TProvince> TProvinces { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<UserSafetySet> UserSafetySets { get; set; }
        public System.Data.Entity.DbSet<VideoCategorySet> VideoCategorySets { get; set; }
        public System.Data.Entity.DbSet<VideoSet> VideoSets { get; set; }
        public System.Data.Entity.DbSet<WorkCategorySet> WorkCategorySets { get; set; }
        public System.Data.Entity.DbSet<WorkSet> WorkSets { get; set; }

        public FakeQNZDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Achievements = new FakeDbSet<Achievement>("Id");
            AchievementCategories = new FakeDbSet<AchievementCategory>("Id");
            Albums = new FakeDbSet<Album>("Id");
            AnnouncementSets = new FakeDbSet<AnnouncementSet>("Id");
            Articles = new FakeDbSet<Article>("Id");
            ArticleCategories = new FakeDbSet<ArticleCategory>("Id");
            CarouselSets = new FakeDbSet<CarouselSet>("Id");
            CartSets = new FakeDbSet<CartSet>("Id");
            Cases = new FakeDbSet<Case>("Id");
            ChronicleSets = new FakeDbSet<ChronicleSet>("Id");
            ClientSets = new FakeDbSet<ClientSet>("Id");
            CommentSets = new FakeDbSet<CommentSet>("Id");
            Dictionaries = new FakeDbSet<Dictionary>("Id");
            DictionaryTypes = new FakeDbSet<DictionaryType>("Id");
            DocumentCategorySets = new FakeDbSet<DocumentCategorySet>("Id");
            DocumentSets = new FakeDbSet<DocumentSet>("Id", "Title", "CategoryId", "Importance", "Active", "IsVip", "IsLink", "DownloadCount", "CreatedDate", "CreatedBy");
            EmailAccountSets = new FakeDbSet<EmailAccountSet>("Id");
            EmailSets = new FakeDbSet<EmailSet>("Id");
            EmailTemplateSets = new FakeDbSet<EmailTemplateSet>("Id");
            FilterTemplateSets = new FakeDbSet<FilterTemplateSet>("Id");
            GoodsCategorySets = new FakeDbSet<GoodsCategorySet>("Id");
            GoodsPhotoSets = new FakeDbSet<GoodsPhotoSet>("Id");
            GoodsSets = new FakeDbSet<GoodsSet>("Id");
            Institutes = new FakeDbSet<Institute>("Id");
            Jobs = new FakeDbSet<Job>("Id");
            Laboratories = new FakeDbSet<Laboratory>("Id");
            LinkCategorySets = new FakeDbSet<LinkCategorySet>("Id");
            LinkSets = new FakeDbSet<LinkSet>("Id");
            Logs = new FakeDbSet<Log>("Id");
            MenuCategorySets = new FakeDbSet<MenuCategorySet>("Id");
            MenuSets = new FakeDbSet<MenuSet>("Id");
            OrderDetailSets = new FakeDbSet<OrderDetailSet>("Id");
            OrderSets = new FakeDbSet<OrderSet>("Id");
            Outlets = new FakeDbSet<Outlet>("Id");
            PageMetas = new FakeDbSet<PageMeta>("Id");
            PageSets = new FakeDbSet<PageSet>("Id");
            Photos = new FakeDbSet<Photo>("Id");
            PositionSets = new FakeDbSet<PositionSet>("Id");
            PostCategorySets = new FakeDbSet<PostCategorySet>("Id");
            PostSets = new FakeDbSet<PostSet>("Id");
            Products = new FakeDbSet<Product>("Id");
            ProductCategories = new FakeDbSet<ProductCategory>("Id");
            ProductPhotoSets = new FakeDbSet<ProductPhotoSet>("Id");
            QuestionCategorySets = new FakeDbSet<QuestionCategorySet>("Id");
            QuestionSets = new FakeDbSet<QuestionSet>("Id");
            RecipientInfoSets = new FakeDbSet<RecipientInfoSet>("Id");
            ReservationSets = new FakeDbSet<ReservationSet>("VideoId", "OpenId");
            Roles = new FakeDbSet<Role>("Id");
            SimpleProducts = new FakeDbSet<SimpleProduct>("Id");
            SolutionSets = new FakeDbSet<SolutionSet>("Id");
            TCities = new FakeDbSet<TCity>("Id");
            TDistricts = new FakeDbSet<TDistrict>("Id");
            TeamSets = new FakeDbSet<TeamSet>("Id");
            TechnologySets = new FakeDbSet<TechnologySet>("Id");
            TProvinces = new FakeDbSet<TProvince>("Id");
            Users = new FakeDbSet<User>("Id");
            UserSafetySets = new FakeDbSet<UserSafetySet>("Id");
            VideoCategorySets = new FakeDbSet<VideoCategorySet>("Id");
            VideoSets = new FakeDbSet<VideoSet>("Id");
            WorkCategorySets = new FakeDbSet<WorkCategorySet>("Id");
            WorkSets = new FakeDbSet<WorkSet>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Achievements
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Achievement
    {

        ///<summary>
        /// 科研成果
        ///</summary>
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string Body { get; set; } // Body
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public System.DateTime Pubdate { get; set; } // Pubdate
        public int ViewCount { get; set; } // ViewCount
        public bool Active { get; set; } // Active
        public int CategoryId { get; set; } // CategoryId
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate

        // Foreign keys

        /// <summary>
        /// Parent AchievementCategory pointed by [Achievements].([CategoryId]) (FK_Achievements_AchievementCategories)
        /// </summary>
        public virtual AchievementCategory AchievementCategory { get; set; } // FK_Achievements_AchievementCategories

        public Achievement()
        {
            Pubdate = System.DateTime.Now;
            ViewCount = 0;
            Active = true;
        }
    }

    // AchievementCategories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class AchievementCategory
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public string Alias { get; set; } // Alias (length: 50)
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Achievements where [Achievements].[CategoryId] point to this entity (FK_Achievements_AchievementCategories)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Achievement> Achievements { get; set; } // Achievements.FK_Achievements_AchievementCategories

        public AchievementCategory()
        {
            Achievements = new System.Collections.Generic.List<Achievement>();
        }
    }

    // Albums
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Album
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string Cover { get; set; } // Cover (length: 150)
        public string Banner { get; set; } // Banner (length: 150)
        public bool Active { get; set; } // Active
        public int Importance { get; set; } // Importance
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Photos where [Photos].[AlbumId] point to this entity (FK_AlbumPhoto)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Photo> Photos { get; set; } // Photos.FK_AlbumPhoto

        public Album()
        {
            Importance = 0;
            Photos = new System.Collections.Generic.List<Photo>();
        }
    }

    // AnnouncementSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class AnnouncementSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string Body { get; set; } // Body
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public int ViewCount { get; set; } // ViewCount
        public string Source { get; set; } // Source (length: 100)
        public string Thumbnail { get; set; } // Thumbnail (length: 150)

        public AnnouncementSet()
        {
            ViewCount = 0;
        }
    }

    // Articles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Article
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string Body { get; set; } // Body
        public string Summary { get; set; } // Summary
        public int CategoryId { get; set; } // CategoryId
        public int ViewCount { get; set; } // ViewCount
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public bool? Recommend { get; set; } // Recommend
        public bool Active { get; set; } // Active
        public string FullImage { get; set; } // FullImage (length: 150)
        public string Source { get; set; } // Source (length: 100)
        public System.DateTime Pubdate { get; set; } // Pubdate
        public string SourceLink { get; set; } // SourceLink (length: 150)
        public bool CanComment { get; set; } // CanComment
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate

        // Foreign keys

        /// <summary>
        /// Parent ArticleCategory pointed by [Articles].([CategoryId]) (FK_ArticleSet_ArticleCategorySet)
        /// </summary>
        public virtual ArticleCategory ArticleCategory { get; set; } // FK_ArticleSet_ArticleCategorySet

        public Article()
        {
            ViewCount = 0;
            Recommend = false;
            Active = true;
        }
    }

    // ArticleCategories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ArticleCategory
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public string SeoName { get; set; } // SeoName (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Articles where [Articles].[CategoryId] point to this entity (FK_ArticleSet_ArticleCategorySet)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Article> Articles { get; set; } // Articles.FK_ArticleSet_ArticleCategorySet

        public ArticleCategory()
        {
            Articles = new System.Collections.Generic.List<Article>();
        }
    }

    // CarouselSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class CarouselSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public string Description { get; set; } // Description
        public string WebLink { get; set; } // WebLink (length: 150)
        public string ImageUrl { get; set; } // ImageUrl (length: 150)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string ImageUrlMobile { get; set; } // ImageUrlMobile (length: 150)
        public int PositionId { get; set; } // PositionId

        // Foreign keys

        /// <summary>
        /// Parent PositionSet pointed by [CarouselSet].([PositionId]) (FK_CarouselSet_PositionSet)
        /// </summary>
        public virtual PositionSet PositionSet { get; set; } // FK_CarouselSet_PositionSet

        public CarouselSet()
        {
            Importance = 0;
        }
    }

    // CartSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class CartSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string CartId { get; set; } // CartId (length: 100)
        public int GoodsId { get; set; } // GoodsId
        public int Count { get; set; } // Count
        public System.DateTime DateCreated { get; set; } // DateCreated

        // Foreign keys

        /// <summary>
        /// Parent GoodsSet pointed by [CartSet].([GoodsId]) (FK_Carts_GoodsSet)
        /// </summary>
        public virtual GoodsSet GoodsSet { get; set; } // FK_Carts_GoodsSet
    }

    // Cases
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Case
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 150)
        public string Body { get; set; } // Body
        public string Summary { get; set; } // Summary
        public int ViewCount { get; set; } // ViewCount
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public bool Active { get; set; } // Active
        public System.DateTime? Pubdate { get; set; } // Pubdate
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)

        public Case()
        {
            ViewCount = 0;
            Active = true;
        }
    }

    // ChronicleSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ChronicleSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public short Year { get; set; } // Year
        public short Month { get; set; } // Month
        public short? Day { get; set; } // Day
        public bool? Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public int ViewCount { get; set; } // ViewCount
        public string Body { get; set; } // Body
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public string Summary { get; set; } // Summary (length: 500)

        public ChronicleSet()
        {
            ViewCount = 0;
        }
    }

    // ClientSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ClientSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string ClientName { get; set; } // ClientName (length: 100)
        public string LogoUrl { get; set; } // LogoURL (length: 150)
        public string Homepage { get; set; } // Homepage (length: 150)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate

        public ClientSet()
        {
            Importance = 0;
            Active = true;
        }
    }

    // CommentSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class CommentSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Body { get; set; } // Body
        public System.DateTime Pubdate { get; set; } // Pubdate
        public string Name { get; set; } // Name (length: 50)
        public int ArticleId { get; set; } // ArticleId
        public bool? Active { get; set; } // Active
    }

    // Dictionaries
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Dictionary
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public int TypeId { get; set; } // TypeId
        public int Importance { get; set; } // Importance

        // Foreign keys

        /// <summary>
        /// Parent DictionaryType pointed by [Dictionaries].([TypeId]) (FK_Dictionaries_DictionaryTypes)
        /// </summary>
        public virtual DictionaryType DictionaryType { get; set; } // FK_Dictionaries_DictionaryTypes
    }

    // DictionaryTypes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DictionaryType
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Dictionaries where [Dictionaries].[TypeId] point to this entity (FK_Dictionaries_DictionaryTypes)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Dictionary> Dictionaries { get; set; } // Dictionaries.FK_Dictionaries_DictionaryTypes

        public DictionaryType()
        {
            Dictionaries = new System.Collections.Generic.List<Dictionary>();
        }
    }

    // DocumentCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DocumentCategorySet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public string SeoName { get; set; } // SeoName (length: 50)
    }

    // DocumentSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DocumentSet
    {
        public int Id { get; set; } // id (Primary key)
        public string Title { get; set; } // Title (Primary key) (length: 50)
        public int CategoryId { get; set; } // CategoryId (Primary key)
        public decimal? FileSize { get; set; } // FileSize
        public string Extension { get; set; } // Extension (length: 50)
        public int Importance { get; set; } // Importance (Primary key)
        public bool Active { get; set; } // Active (Primary key)
        public bool IsVip { get; set; } // IsVIP (Primary key)
        public bool IsLink { get; set; } // IsLink (Primary key)
        public int DownloadCount { get; set; } // DownloadCount (Primary key)
        public string ProductIds { get; set; } // ProductIds (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate (Primary key)
        public string CreatedBy { get; set; } // CreatedBy (Primary key) (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public string FilePath { get; set; } // FilePath (length: 150)
        public string Thumbnail { get; set; } // Thumbnail (length: 150)

        public DocumentSet()
        {
            Importance = 0;
            DownloadCount = 0;
        }
    }

    // EmailAccountSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class EmailAccountSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Email { get; set; } // Email (length: 150)
        public string Smtpserver { get; set; } // Smtpserver (length: 150)
        public string UserName { get; set; } // UserName (length: 150)
        public string Password { get; set; } // Password (length: 150)
        public int? Port { get; set; } // Port
        public bool EnableSsl { get; set; } // EnableSsl
        public bool IsDefault { get; set; } // IsDefault
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
    }

    // EmailSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class EmailSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Subject { get; set; } // Subject (length: 100)
        public string Body { get; set; } // Body
        public string MailTo { get; set; } // MailTo (length: 250)
        public string MailCc { get; set; } // MailCc (length: 250)
        public bool Readed { get; set; } // Readed
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
    }

    // EmailTemplateSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class EmailTemplateSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Subject { get; set; } // Subject (length: 150)
        public string Body { get; set; } // Body
        public string TemplateNo { get; set; } // TemplateNo (length: 50)
        public int EmailAccountId { get; set; } // EmailAccountId
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
    }

    // FilterTemplateSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FilterTemplateSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 100)
        public string Title { get; set; } // Title (length: 100)
        public string Body { get; set; } // Body (length: 100)
        public string Description { get; set; } // Description (length: 100)
        public string Author { get; set; } // Author (length: 100)
        public string PublishDate { get; set; } // PublishDate (length: 100)
        public string Keyword { get; set; } // Keyword (length: 100)
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public bool? Active { get; set; } // Active
        public string Source { get; set; } // Source (length: 150)
        public string LinksContainer { get; set; } // LinksContainer (length: 100)
        public int Importance { get; set; } // Importance
        public string Links { get; set; } // Links (length: 100)
        public string KeywordSet { get; set; } // KeywordSet (length: 500)
        public string Encode { get; set; } // Encode (length: 50)

        public FilterTemplateSet()
        {
            Importance = 0;
        }
    }

    // GoodsCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class GoodsCategorySet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 150)
        public string Description { get; set; } // Description
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime UpdatedDate { get; set; } // UpdatedDate
        public string SeoName { get; set; } // SeoName (length: 50)
        public bool Recommend { get; set; } // Recommend
        public string Thumbnail { get; set; } // Thumbnail (length: 150)

        // Reverse navigation

        /// <summary>
        /// Child GoodsSets where [GoodsSet].[CategoryId] point to this entity (FK_GoodsSet_GoodsCategorySet)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GoodsSet> GoodsSets { get; set; } // GoodsSet.FK_GoodsSet_GoodsCategorySet

        public GoodsCategorySet()
        {
            Recommend = false;
            GoodsSets = new System.Collections.Generic.List<GoodsSet>();
        }
    }

    // GoodsPhotoSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class GoodsPhotoSet
    {
        public int Id { get; set; } // Id (Primary key)
        public int GoodsId { get; set; } // GoodsId
        public string ImageUrl { get; set; } // ImageURL (length: 150)
        public string Thumbnail { get; set; } // Thumbnail (length: 150)

        // Foreign keys

        /// <summary>
        /// Parent GoodsSet pointed by [GoodsPhotoSet].([GoodsId]) (FK_GoodsGoodsPhoto)
        /// </summary>
        public virtual GoodsSet GoodsSet { get; set; } // FK_GoodsGoodsPhoto
    }

    // GoodsSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class GoodsSet
    {
        public int Id { get; set; } // Id (Primary key)
        public int CategoryId { get; set; } // CategoryId
        public string Name { get; set; } // Name (length: 150)
        public decimal Price { get; set; } // Price
        public string Description { get; set; } // Description
        public string FullDescription { get; set; } // FullDescription
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public int ViewCount { get; set; } // ViewCount
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime UpdatedDate { get; set; } // UpdatedDate
        public bool Active { get; set; } // Active

        // Reverse navigation

        /// <summary>
        /// Child CartSets where [CartSet].[GoodsId] point to this entity (FK_Carts_GoodsSet)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CartSet> CartSets { get; set; } // CartSet.FK_Carts_GoodsSet
        /// <summary>
        /// Child GoodsPhotoSets where [GoodsPhotoSet].[GoodsId] point to this entity (FK_GoodsGoodsPhoto)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GoodsPhotoSet> GoodsPhotoSets { get; set; } // GoodsPhotoSet.FK_GoodsGoodsPhoto

        // Foreign keys

        /// <summary>
        /// Parent GoodsCategorySet pointed by [GoodsSet].([CategoryId]) (FK_GoodsSet_GoodsCategorySet)
        /// </summary>
        public virtual GoodsCategorySet GoodsCategorySet { get; set; } // FK_GoodsSet_GoodsCategorySet

        public GoodsSet()
        {
            Price = 0m;
            ViewCount = 0;
            Active = true;
            CartSets = new System.Collections.Generic.List<CartSet>();
            GoodsPhotoSets = new System.Collections.Generic.List<GoodsPhotoSet>();
        }
    }

    // Institutes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Institute
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public int DictionaryId { get; set; } // DictionaryId
        public string Introduction { get; set; } // Introduction
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Laboratories where [Laboratories].[InstituteId] point to this entity (FK_Laboratories_Institutes)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Laboratory> Laboratories { get; set; } // Laboratories.FK_Laboratories_Institutes

        public Institute()
        {
            Laboratories = new System.Collections.Generic.List<Laboratory>();
        }
    }

    // Jobs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Job
    {
        public int Id { get; set; } // Id (Primary key)
        public string Post { get; set; } // Post (length: 100)
        public string Description { get; set; } // Description
        public int Importance { get; set; } // Importance
        public string Category { get; set; } // Category (length: 50)
        public int? Quantity { get; set; } // Quantity
        public string Address { get; set; } // Address (length: 150)
        public string SeoName { get; set; } // SeoName (length: 50)
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
    }

    // Laboratories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Laboratory
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public int Importance { get; set; } // Importance
        public int InstituteId { get; set; } // InstituteId
        public string Body { get; set; } // Body
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent Institute pointed by [Laboratories].([InstituteId]) (FK_Laboratories_Institutes)
        /// </summary>
        public virtual Institute Institute { get; set; } // FK_Laboratories_Institutes
    }

    // LinkCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class LinkCategorySet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 150)
        public int? ParentCategoryId { get; set; } // ParentCategoryId
        public int Importance { get; set; } // Importance
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public bool? Active { get; set; } // Active
    }

    // LinkSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class LinkSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public string Description { get; set; } // Description
        public string WebLink { get; set; } // WebLink (length: 150)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public int? CategoryId { get; set; } // CategoryId
        public string LogoUrl { get; set; } // LogoUrl (length: 150)
    }

    // Logs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Log
    {
        public int Id { get; set; } // Id (Primary key)
        public System.DateTime Date { get; set; } // Date
        public string Thread { get; set; } // Thread (length: 255)
        public string Level { get; set; } // Level (length: 50)
        public string Logger { get; set; } // Logger (length: 255)
        public string Message { get; set; } // Message (length: 4000)
        public string Exception { get; set; } // Exception (length: 2000)
        public string UserName { get; set; } // UserName (length: 50)
    }

    // MenuCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class MenuCategorySet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public int Importance { get; set; } // Importance
        public bool IsSys { get; set; } // IsSys
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child MenuSets where [MenuSet].[CategoryId] point to this entity (FK_MenuSet_MenuCategorySet)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<MenuSet> MenuSets { get; set; } // MenuSet.FK_MenuSet_MenuCategorySet

        public MenuCategorySet()
        {
            MenuSets = new System.Collections.Generic.List<MenuSet>();
        }
    }

    // MenuSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class MenuSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public string Url { get; set; } // Url (length: 150)
        public int Importance { get; set; } // Importance
        public bool? Hidden { get; set; } // Hidden
        public bool Active { get; set; } // Active
        public string Iconfont { get; set; } // Iconfont (length: 50)
        public int? ParentId { get; set; } // ParentId
        public short? MenuType { get; set; } // MenuType
        public string Area { get; set; } // Area (length: 50)
        public string Controller { get; set; } // Controller (length: 50)
        public string Action { get; set; } // Action (length: 50)
        public int CategoryId { get; set; } // CategoryId
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public bool IsExpand { get; set; } // IsExpand
        public int? LayoutLevel { get; set; } // LayoutLevel

        // Reverse navigation

        /// <summary>
        /// Child MenuSets where [MenuSet].[ParentId] point to this entity (FK_dbo.Menus_dbo.Menus_ParentId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<MenuSet> MenuSets { get; set; } // MenuSet.FK_dbo.Menus_dbo.Menus_ParentId
        /// <summary>
        /// Child Roles (Many-to-Many) mapped by table [RoleMenus]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Role> Roles { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent MenuCategorySet pointed by [MenuSet].([CategoryId]) (FK_MenuSet_MenuCategorySet)
        /// </summary>
        public virtual MenuCategorySet MenuCategorySet { get; set; } // FK_MenuSet_MenuCategorySet

        /// <summary>
        /// Parent MenuSet pointed by [MenuSet].([ParentId]) (FK_dbo.Menus_dbo.Menus_ParentId)
        /// </summary>
        public virtual MenuSet Parent { get; set; } // FK_dbo.Menus_dbo.Menus_ParentId

        public MenuSet()
        {
            Active = true;
            MenuType = 1;
            IsExpand = true;
            MenuSets = new System.Collections.Generic.List<MenuSet>();
            Roles = new System.Collections.Generic.List<Role>();
        }
    }

    // OrderDetailSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class OrderDetailSet
    {
        public int Id { get; set; } // Id (Primary key)
        public int OrderId { get; set; } // OrderId
        public int GoodsId { get; set; } // GoodsId
        public int Quantity { get; set; } // Quantity
        public decimal UnitPrice { get; set; } // UnitPrice

        // Foreign keys

        /// <summary>
        /// Parent OrderSet pointed by [OrderDetailSet].([OrderId]) (FK_OrderDetailSet_OrderSet)
        /// </summary>
        public virtual OrderSet OrderSet { get; set; } // FK_OrderDetailSet_OrderSet
    }

    // OrderSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class OrderSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Username { get; set; } // Username (length: 100)
        public string RealName { get; set; } // RealName (length: 50)
        public string Address { get; set; } // Address (length: 250)
        public string City { get; set; } // City (length: 50)
        public string State { get; set; } // State (length: 50)
        public string PostalCode { get; set; } // PostalCode (length: 50)
        public string Country { get; set; } // Country (length: 50)
        public string Phone { get; set; } // Phone (length: 50)
        public string Email { get; set; } // Email (length: 150)
        public decimal Total { get; set; } // Total
        public System.DateTime OrderDate { get; set; } // OrderDate

        // Reverse navigation

        /// <summary>
        /// Child OrderDetailSets where [OrderDetailSet].[OrderId] point to this entity (FK_OrderDetailSet_OrderSet)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<OrderDetailSet> OrderDetailSets { get; set; } // OrderDetailSet.FK_OrderDetailSet_OrderSet

        public OrderSet()
        {
            OrderDetailSets = new System.Collections.Generic.List<OrderDetailSet>();
        }
    }

    // Outlets
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Outlet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string Address { get; set; } // Address (length: 200)
        public string Coordinate { get; set; } // Coordinate (length: 50)
        public string ContactMan { get; set; } // ContactMan (length: 50)
        public string Phone { get; set; } // Phone (length: 50)
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
    }

    // PageMetas
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class PageMeta
    {
        public int Id { get; set; } // Id (Primary key)
        public short ModelType { get; set; } // ModelType
        public string ObjectId { get; set; } // ObjectId (length: 50)
        public string Keyword { get; set; } // Keyword (length: 250)
        public string Description { get; set; } // Description (length: 500)
        public string Title { get; set; } // Title (length: 150)
    }

    // PageSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class PageSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string Body { get; set; } // Body
        public string SeoName { get; set; } // SeoName (length: 100)
        public int? ViewCount { get; set; } // ViewCount
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public string TemplateName { get; set; } // TemplateName (length: 50)
        public string HeadCode { get; set; } // HeadCode
        public string FooterCode { get; set; } // FooterCode
    }

    // Photos
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Photo
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public int AlbumId { get; set; } // AlbumId
        public string FullImageUrl { get; set; } // FullImageURL (length: 150)
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent Album pointed by [Photos].([AlbumId]) (FK_AlbumPhoto)
        /// </summary>
        public virtual Album Album { get; set; } // FK_AlbumPhoto

        public Photo()
        {
            Importance = 0;
        }
    }

    // PositionSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class PositionSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string Sketch { get; set; } // Sketch (length: 150)
        public int ImageHeight { get; set; } // ImageHeight
        public int ImageWidth { get; set; } // ImageWidth
        public int? Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public string Code { get; set; } // Code (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child CarouselSets where [CarouselSet].[PositionId] point to this entity (FK_CarouselSet_PositionSet)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<CarouselSet> CarouselSets { get; set; } // CarouselSet.FK_CarouselSet_PositionSet

        public PositionSet()
        {
            ImageHeight = 0;
            ImageWidth = 0;
            CarouselSets = new System.Collections.Generic.List<CarouselSet>();
        }
    }

    // PostCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class PostCategorySet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 150)
        public string Description { get; set; } // Description (length: 256)
        public int Importance { get; set; } // Importance
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public bool? Active { get; set; } // Active
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public string SeoName { get; set; } // SeoName (length: 50)

        public PostCategorySet()
        {
            Importance = 0;
            Active = true;
        }
    }

    // PostSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class PostSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // title (length: 150)
        public string Summary { get; set; } // Summary (length: 256)
        public string Body { get; set; } // Body
        public string Keywords { get; set; } // Keywords (length: 100)
        public int ViewCount { get; set; } // ViewCount
        public int CategoryId { get; set; } // CategoryId
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public bool? Recommend { get; set; } // Recommend
        public bool? Active { get; set; } // Active
        public string Thumbnail { get; set; } // Thumbnail (length: 150)

        public PostSet()
        {
            ViewCount = 0;
        }
    }

    // Products
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Product
    {
        public int Id { get; set; } // Id (Primary key)
        public string ProductNo { get; set; } // ProductNo (length: 50)
        public string ProductName { get; set; } // ProductName (length: 100)
        public string Summary { get; set; } // Summary (length: 500)
        public string Body { get; set; } // Body
        public string Introduction { get; set; } // Introduction (length: 500)
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public string ImageUrl { get; set; } // ImageUrl
        public string Cover { get; set; } // Cover (length: 150)
        public string ViewImage { get; set; } // ViewImage (length: 150)
        public int Importance { get; set; } // Importance
        public bool Recommend { get; set; } // Recommend
        public bool Active { get; set; } // Active
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public int ViewCount { get; set; } // ViewCount
        public string Keywords { get; set; } // Keywords (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child ProductCategories (Many-to-Many) mapped by table [ProductWithCategory]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProductCategory> ProductCategories { get; set; } // Many to many mapping
        /// <summary>
        /// Child ProductPhotoSets where [ProductPhotoSet].[ProductId] point to this entity (FK_ProductPhotos_Products)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProductPhotoSet> ProductPhotoSets { get; set; } // ProductPhotoSet.FK_ProductPhotos_Products
        /// <summary>
        /// Child TechnologySets where [TechnologySet].[ProductId] point to this entity (FK_Technologys_Products)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TechnologySet> TechnologySets { get; set; } // TechnologySet.FK_Technologys_Products

        public Product()
        {
            Importance = 0;
            Recommend = false;
            Active = true;
            ViewCount = 0;
            ProductPhotoSets = new System.Collections.Generic.List<ProductPhotoSet>();
            TechnologySets = new System.Collections.Generic.List<TechnologySet>();
            ProductCategories = new System.Collections.Generic.List<ProductCategory>();
        }
    }

    // ProductCategories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ProductCategory
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public int? ParentId { get; set; } // ParentId
        public string IconName { get; set; } // IconName (length: 150)
        public string SeoName { get; set; } // SeoName (length: 50)
        public string ImageUrl { get; set; } // ImageUrl (length: 150)
        public string Description { get; set; } // Description (length: 500)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Products (Many-to-Many) mapped by table [ProductWithCategory]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Product> Products { get; set; } // Many to many mapping
        /// <summary>
        /// Child ProductCategories where [ProductCategories].[ParentId] point to this entity (FK_dbo.Categories_dbo.Categories_ParentId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ProductCategory> ProductCategories { get; set; } // ProductCategories.FK_dbo.Categories_dbo.Categories_ParentId

        // Foreign keys

        /// <summary>
        /// Parent ProductCategory pointed by [ProductCategories].([ParentId]) (FK_dbo.Categories_dbo.Categories_ParentId)
        /// </summary>
        public virtual ProductCategory Parent { get; set; } // FK_dbo.Categories_dbo.Categories_ParentId

        public ProductCategory()
        {
            ProductCategories = new System.Collections.Generic.List<ProductCategory>();
            Products = new System.Collections.Generic.List<Product>();
        }
    }

    // ProductPhotoSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ProductPhotoSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public string ImgUrl { get; set; } // ImgURL (length: 150)
        public int Importance { get; set; } // Importance
        public int ProductId { get; set; } // ProductId

        // Foreign keys

        /// <summary>
        /// Parent Product pointed by [ProductPhotoSet].([ProductId]) (FK_ProductPhotos_Products)
        /// </summary>
        public virtual Product Product { get; set; } // FK_ProductPhotos_Products

        public ProductPhotoSet()
        {
            Importance = 0;
        }
    }

    // QuestionCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class QuestionCategorySet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child QuestionSets where [QuestionSet].[CategoryId] point to this entity (FK_QuestionSet_QuestionCategorySet)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<QuestionSet> QuestionSets { get; set; } // QuestionSet.FK_QuestionSet_QuestionCategorySet

        public QuestionCategorySet()
        {
            QuestionSets = new System.Collections.Generic.List<QuestionSet>();
        }
    }

    // QuestionSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class QuestionSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 500)
        public string Answer { get; set; } // Answer
        public int Importance { get; set; } // Importance
        public bool? Active { get; set; } // Active
        public int CategoryId { get; set; } // CategoryId
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate

        // Foreign keys

        /// <summary>
        /// Parent QuestionCategorySet pointed by [QuestionSet].([CategoryId]) (FK_QuestionSet_QuestionCategorySet)
        /// </summary>
        public virtual QuestionCategorySet QuestionCategorySet { get; set; } // FK_QuestionSet_QuestionCategorySet

        public QuestionSet()
        {
            Importance = 0;
            Active = true;
        }
    }

    // RecipientInfoSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class RecipientInfoSet
    {
        public int Id { get; set; } // Id (Primary key)
        public int ProvinceId { get; set; } // ProvinceId
        public int? CityId { get; set; } // CityId
        public int? DistrictId { get; set; } // DistrictId
        public string Address { get; set; } // Address (length: 250)
        public string Postcode { get; set; } // Postcode (length: 50)
        public string Recipient { get; set; } // Recipient (length: 50)
        public string Mobile { get; set; } // Mobile (length: 50)
        public bool? IsDefault { get; set; } // IsDefault
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string Phone { get; set; } // Phone (length: 10)

        // Foreign keys

        /// <summary>
        /// Parent TCity pointed by [RecipientInfoSet].([CityId]) (FK_RecipientInfoSet_T_City)
        /// </summary>
        public virtual TCity TCity { get; set; } // FK_RecipientInfoSet_T_City

        /// <summary>
        /// Parent TDistrict pointed by [RecipientInfoSet].([DistrictId]) (FK_RecipientInfoSet_T_District)
        /// </summary>
        public virtual TDistrict TDistrict { get; set; } // FK_RecipientInfoSet_T_District

        /// <summary>
        /// Parent TProvince pointed by [RecipientInfoSet].([ProvinceId]) (FK_RecipientInfoSet_T_Province)
        /// </summary>
        public virtual TProvince TProvince { get; set; } // FK_RecipientInfoSet_T_Province
    }

    // ReservationSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ReservationSet
    {
        public int VideoId { get; set; } // VideoId (Primary key)
        public string OpenId { get; set; } // OpenId (Primary key) (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public System.DateTime? NoticedDate { get; set; } // NoticedDate
    }

    // Roles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Role
    {
        public int Id { get; set; } // Id (Primary key)
        public string RoleName { get; set; } // RoleName (length: 50)
        public string Description { get; set; } // Description
        public bool IsSys { get; set; } // IsSys
        public bool? Active { get; set; } // Active

        // Reverse navigation

        /// <summary>
        /// Child MenuSets (Many-to-Many) mapped by table [RoleMenus]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<MenuSet> MenuSets { get; set; } // Many to many mapping
        /// <summary>
        /// Child Users (Many-to-Many) mapped by table [UserRoles]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<User> Users { get; set; } // Many to many mapping

        public Role()
        {
            Active = true;
            Users = new System.Collections.Generic.List<User>();
            MenuSets = new System.Collections.Generic.List<MenuSet>();
        }
    }

    // SimpleProducts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class SimpleProduct
    {
        public int Id { get; set; } // Id (Primary key)
        public string ProductNo { get; set; } // ProductNo (length: 50)
        public string ProductName { get; set; } // ProductName (length: 150)
        public string Summary { get; set; } // Summary (length: 250)
        public string Body { get; set; } // Body
        public string Parameters { get; set; } // Parameters
        public string Specific { get; set; } // Specific
        public string Controls { get; set; } // Controls
        public string Videos { get; set; } // Videos
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public string ImageUrl { get; set; } // ImageUrl (length: 150)
        public int ViewCount { get; set; } // ViewCount
        public bool? Active { get; set; } // Active
        public bool? Recommend { get; set; } // Recommend
        public int Importance { get; set; } // Importance
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate

        public SimpleProduct()
        {
            ViewCount = 0;
            Active = true;
            Importance = 0;
        }
    }

    // SolutionSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class SolutionSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string Description { get; set; } // Description (length: 500)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string FontIcon { get; set; } // FontIcon (length: 50)

        public SolutionSet()
        {
            Importance = 0;
            Active = true;
        }
    }

    // T_City
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class TCity
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public int? ProvinceId { get; set; } // ProvinceId
        public int? Sort { get; set; } // Sort

        // Reverse navigation

        /// <summary>
        /// Child RecipientInfoSets where [RecipientInfoSet].[CityId] point to this entity (FK_RecipientInfoSet_T_City)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RecipientInfoSet> RecipientInfoSets { get; set; } // RecipientInfoSet.FK_RecipientInfoSet_T_City
        /// <summary>
        /// Child TDistricts where [T_District].[CityId] point to this entity (FK_T_District_T_City)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TDistrict> TDistricts { get; set; } // T_District.FK_T_District_T_City

        // Foreign keys

        /// <summary>
        /// Parent TProvince pointed by [T_City].([ProvinceId]) (FK_T_City_T_Province)
        /// </summary>
        public virtual TProvince TProvince { get; set; } // FK_T_City_T_Province

        public TCity()
        {
            RecipientInfoSets = new System.Collections.Generic.List<RecipientInfoSet>();
            TDistricts = new System.Collections.Generic.List<TDistrict>();
        }
    }

    // T_District
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class TDistrict
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 30)
        public int CityId { get; set; } // CityId
        public int? Sort { get; set; } // Sort

        // Reverse navigation

        /// <summary>
        /// Child RecipientInfoSets where [RecipientInfoSet].[DistrictId] point to this entity (FK_RecipientInfoSet_T_District)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RecipientInfoSet> RecipientInfoSets { get; set; } // RecipientInfoSet.FK_RecipientInfoSet_T_District

        // Foreign keys

        /// <summary>
        /// Parent TCity pointed by [T_District].([CityId]) (FK_T_District_T_City)
        /// </summary>
        public virtual TCity TCity { get; set; } // FK_T_District_T_City

        public TDistrict()
        {
            RecipientInfoSets = new System.Collections.Generic.List<RecipientInfoSet>();
        }
    }

    // TeamSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class TeamSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string PhotoUrl { get; set; } // PhotoUrl (length: 150)
        public string Post { get; set; } // Post (length: 100)
        public string Description { get; set; } // Description
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
    }

    // TechnologySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class TechnologySet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string EnglishTitle { get; set; } // EnglishTitle (length: 100)
        public string ImagesUrl { get; set; } // ImagesURL
        public int Importance { get; set; } // Importance
        public int ProductId { get; set; } // ProductId
        public string Body { get; set; } // Body
        public bool? Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent Product pointed by [TechnologySet].([ProductId]) (FK_Technologys_Products)
        /// </summary>
        public virtual Product Product { get; set; } // FK_Technologys_Products

        public TechnologySet()
        {
            Importance = 0;
        }
    }

    // T_Province
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class TProvince
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public int? Sort { get; set; } // Sort
        public string Remark { get; set; } // Remark (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child RecipientInfoSets where [RecipientInfoSet].[ProvinceId] point to this entity (FK_RecipientInfoSet_T_Province)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RecipientInfoSet> RecipientInfoSets { get; set; } // RecipientInfoSet.FK_RecipientInfoSet_T_Province
        /// <summary>
        /// Child TCities where [T_City].[ProvinceId] point to this entity (FK_T_City_T_Province)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TCity> TCities { get; set; } // T_City.FK_T_City_T_Province

        public TProvince()
        {
            RecipientInfoSets = new System.Collections.Generic.List<RecipientInfoSet>();
            TCities = new System.Collections.Generic.List<TCity>();
        }
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class User
    {
        public System.Guid Id { get; set; } // Id (Primary key)
        public string UserName { get; set; } // UserName (length: 50)
        public string Email { get; set; } // Email (length: 150)
        public string PasswordHash { get; set; } // PasswordHash
        public string SecurityStamp { get; set; } // SecurityStamp
        public string RealName { get; set; } // RealName (length: 50)
        public string PhotoUrl { get; set; } // PhotoUrl (length: 150)
        public bool IsActive { get; set; } // IsActive
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime? LastActivityDate { get; set; } // LastActivityDate
        public System.DateTime? Birthday { get; set; } // Birthday
        public short? Gender { get; set; } // Gender
        public string Qq { get; set; } // QQ (length: 50)
        public string Mobile { get; set; } // Mobile

        // Reverse navigation

        /// <summary>
        /// Child Roles (Many-to-Many) mapped by table [UserRoles]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Role> Roles { get; set; } // Many to many mapping

        public User()
        {
            Roles = new System.Collections.Generic.List<Role>();
        }
    }

    // UserSafetySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class UserSafetySet
    {
        public int Id { get; set; } // Id (Primary key)
        public System.Guid Code { get; set; } // Code
        public string UserName { get; set; } // UserName (length: 50)
        public short EmailType { get; set; } // EmailType
        public int Timeout { get; set; } // Timeout
        public System.DateTime CreatedDate { get; set; } // CreatedDate
    }

    // VideoCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class VideoCategorySet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public int Importance { get; set; } // Importance
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public string SeoName { get; set; } // SeoName (length: 50)
    }

    // VideoSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class VideoSet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string VideoUrl { get; set; } // VideoUrl (length: 150)
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public bool Active { get; set; } // Active
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public int CategoryId { get; set; } // CategoryId
        public System.DateTime StartDate { get; set; } // StartDate
        public System.DateTime EndDate { get; set; } // EndDate
        public string Summary { get; set; } // Summary (length: 500)
    }

    // WorkCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class WorkCategorySet
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 150)
        public string Description { get; set; } // Description (length: 256)
        public int Importance { get; set; } // Importance
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public bool? Active { get; set; } // Active
        public string SeoName { get; set; } // SeoName (length: 50)
        public string ImageUrl { get; set; } // ImageUrl (length: 150)

        // Reverse navigation

        /// <summary>
        /// Child WorkSets (Many-to-Many) mapped by table [WorkWorkCategorySet]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<WorkSet> WorkSets { get; set; } // Many to many mapping

        public WorkCategorySet()
        {
            WorkSets = new System.Collections.Generic.List<WorkSet>();
        }
    }

    // WorkSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class WorkSet
    {
        public int Id { get; set; } // id (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public string Body { get; set; } // Body
        public string Abstract { get; set; } // Abstract (length: 300)
        public int? FinishYear { get; set; } // FinishYear
        public string Thumbnail { get; set; } // Thumbnail (length: 150)
        public string Imageurl { get; set; } // Imageurl
        public string Demourl { get; set; } // Demourl (length: 150)
        public int Viewcount { get; set; } // Viewcount
        public string Keywords { get; set; } // Keywords (length: 100)
        public bool? Recommend { get; set; } // Recommend
        public bool Active { get; set; } // Active
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
        public string UpdatedBy { get; set; } // UpdatedBy (length: 50)
        public string CategoryIds { get; set; } // CategoryIds (length: 50)
        public int? SolutionId { get; set; } // SolutionId
        public int? ClientId { get; set; } // ClientId

        // Reverse navigation

        /// <summary>
        /// Child WorkCategorySets (Many-to-Many) mapped by table [WorkWorkCategorySet]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<WorkCategorySet> WorkCategorySets { get; set; } // Many to many mapping

        public WorkSet()
        {
            Viewcount = 0;
            Recommend = true;
            SolutionId = 1;
            WorkCategorySets = new System.Collections.Generic.List<WorkCategorySet>();
        }
    }

    #endregion

    #region POCO Configuration

    // Achievements
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class AchievementConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Achievement>
    {
        public AchievementConfiguration()
            : this("dbo")
        {
        }

        public AchievementConfiguration(string schema)
        {
            ToTable("Achievements", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Pubdate).HasColumnName(@"Pubdate").HasColumnType("datetime").IsRequired();
            Property(x => x.ViewCount).HasColumnName(@"ViewCount").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.AchievementCategory).WithMany(b => b.Achievements).HasForeignKey(c => c.CategoryId).WillCascadeOnDelete(false); // FK_Achievements_AchievementCategories
        }
    }

    // AchievementCategories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class AchievementCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AchievementCategory>
    {
        public AchievementCategoryConfiguration()
            : this("dbo")
        {
        }

        public AchievementCategoryConfiguration(string schema)
        {
            ToTable("AchievementCategories", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.Alias).HasColumnName(@"Alias").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // Albums
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class AlbumConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Album>
    {
        public AlbumConfiguration()
            : this("dbo")
        {
        }

        public AlbumConfiguration(string schema)
        {
            ToTable("Albums", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Cover).HasColumnName(@"Cover").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Banner).HasColumnName(@"Banner").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // AnnouncementSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class AnnouncementSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AnnouncementSet>
    {
        public AnnouncementSetConfiguration()
            : this("dbo")
        {
        }

        public AnnouncementSetConfiguration(string schema)
        {
            ToTable("AnnouncementSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ViewCount).HasColumnName(@"ViewCount").HasColumnType("int").IsRequired();
            Property(x => x.Source).HasColumnName(@"Source").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
        }
    }

    // Articles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ArticleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Article>
    {
        public ArticleConfiguration()
            : this("dbo")
        {
        }

        public ArticleConfiguration(string schema)
        {
            ToTable("Articles", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Summary).HasColumnName(@"Summary").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsRequired();
            Property(x => x.ViewCount).HasColumnName(@"ViewCount").HasColumnType("int").IsRequired();
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Recommend).HasColumnName(@"Recommend").HasColumnType("bit").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.FullImage).HasColumnName(@"FullImage").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Source).HasColumnName(@"Source").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Pubdate).HasColumnName(@"Pubdate").HasColumnType("datetime").IsRequired();
            Property(x => x.SourceLink).HasColumnName(@"SourceLink").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.CanComment).HasColumnName(@"CanComment").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.ArticleCategory).WithMany(b => b.Articles).HasForeignKey(c => c.CategoryId).WillCascadeOnDelete(false); // FK_ArticleSet_ArticleCategorySet
        }
    }

    // ArticleCategories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ArticleCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ArticleCategory>
    {
        public ArticleCategoryConfiguration()
            : this("dbo")
        {
        }

        public ArticleCategoryConfiguration(string schema)
        {
            ToTable("ArticleCategories", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SeoName).HasColumnName(@"SeoName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // CarouselSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class CarouselSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CarouselSet>
    {
        public CarouselSetConfiguration()
            : this("dbo")
        {
        }

        public CarouselSetConfiguration(string schema)
        {
            ToTable("CarouselSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.WebLink).HasColumnName(@"WebLink").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ImageUrl).HasColumnName(@"ImageUrl").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ImageUrlMobile).HasColumnName(@"ImageUrlMobile").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.PositionId).HasColumnName(@"PositionId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.PositionSet).WithMany(b => b.CarouselSets).HasForeignKey(c => c.PositionId).WillCascadeOnDelete(false); // FK_CarouselSet_PositionSet
        }
    }

    // CartSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class CartSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CartSet>
    {
        public CartSetConfiguration()
            : this("dbo")
        {
        }

        public CartSetConfiguration(string schema)
        {
            ToTable("CartSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CartId).HasColumnName(@"CartId").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.GoodsId).HasColumnName(@"GoodsId").HasColumnType("int").IsRequired();
            Property(x => x.Count).HasColumnName(@"Count").HasColumnType("int").IsRequired();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.GoodsSet).WithMany(b => b.CartSets).HasForeignKey(c => c.GoodsId).WillCascadeOnDelete(false); // FK_Carts_GoodsSet
        }
    }

    // Cases
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class CaseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Case>
    {
        public CaseConfiguration()
            : this("dbo")
        {
        }

        public CaseConfiguration(string schema)
        {
            ToTable("Cases", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Summary).HasColumnName(@"Summary").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ViewCount).HasColumnName(@"ViewCount").HasColumnType("int").IsRequired();
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.Pubdate).HasColumnName(@"Pubdate").HasColumnType("datetime").IsOptional();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // ChronicleSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ChronicleSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ChronicleSet>
    {
        public ChronicleSetConfiguration()
            : this("dbo")
        {
        }

        public ChronicleSetConfiguration(string schema)
        {
            ToTable("ChronicleSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Year).HasColumnName(@"Year").HasColumnType("smallint").IsRequired();
            Property(x => x.Month).HasColumnName(@"Month").HasColumnType("smallint").IsRequired();
            Property(x => x.Day).HasColumnName(@"Day").HasColumnType("smallint").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ViewCount).HasColumnName(@"ViewCount").HasColumnType("int").IsRequired();
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Summary).HasColumnName(@"Summary").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
        }
    }

    // ClientSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ClientSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ClientSet>
    {
        public ClientSetConfiguration()
            : this("dbo")
        {
        }

        public ClientSetConfiguration(string schema)
        {
            ToTable("ClientSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ClientName).HasColumnName(@"ClientName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.LogoUrl).HasColumnName(@"LogoURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Homepage).HasColumnName(@"Homepage").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
        }
    }

    // CommentSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class CommentSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CommentSet>
    {
        public CommentSetConfiguration()
            : this("dbo")
        {
        }

        public CommentSetConfiguration(string schema)
        {
            ToTable("CommentSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.Pubdate).HasColumnName(@"Pubdate").HasColumnType("datetime").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ArticleId).HasColumnName(@"ArticleId").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
        }
    }

    // Dictionaries
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DictionaryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Dictionary>
    {
        public DictionaryConfiguration()
            : this("dbo")
        {
        }

        public DictionaryConfiguration(string schema)
        {
            ToTable("Dictionaries", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.TypeId).HasColumnName(@"TypeId").HasColumnType("int").IsRequired();
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.DictionaryType).WithMany(b => b.Dictionaries).HasForeignKey(c => c.TypeId).WillCascadeOnDelete(false); // FK_Dictionaries_DictionaryTypes
        }
    }

    // DictionaryTypes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DictionaryTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DictionaryType>
    {
        public DictionaryTypeConfiguration()
            : this("dbo")
        {
        }

        public DictionaryTypeConfiguration(string schema)
        {
            ToTable("DictionaryTypes", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
        }
    }

    // DocumentCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DocumentCategorySetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DocumentCategorySet>
    {
        public DocumentCategorySetConfiguration()
            : this("dbo")
        {
        }

        public DocumentCategorySetConfiguration(string schema)
        {
            ToTable("DocumentCategorySet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SeoName).HasColumnName(@"SeoName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // DocumentSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class DocumentSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DocumentSet>
    {
        public DocumentSetConfiguration()
            : this("dbo")
        {
        }

        public DocumentSetConfiguration(string schema)
        {
            ToTable("DocumentSet", schema);
            HasKey(x => new { x.Id, x.Title, x.CategoryId, x.Importance, x.Active, x.IsVip, x.IsLink, x.DownloadCount, x.CreatedDate, x.CreatedBy });

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FileSize).HasColumnName(@"FileSize").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.Extension).HasColumnName(@"Extension").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsVip).HasColumnName(@"IsVIP").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsLink).HasColumnName(@"IsLink").HasColumnType("bit").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DownloadCount).HasColumnName(@"DownloadCount").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductIds).HasColumnName(@"ProductIds").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.FilePath).HasColumnName(@"FilePath").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
        }
    }

    // EmailAccountSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class EmailAccountSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmailAccountSet>
    {
        public EmailAccountSetConfiguration()
            : this("dbo")
        {
        }

        public EmailAccountSetConfiguration(string schema)
        {
            ToTable("EmailAccountSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Smtpserver).HasColumnName(@"Smtpserver").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Port).HasColumnName(@"Port").HasColumnType("int").IsOptional();
            Property(x => x.EnableSsl).HasColumnName(@"EnableSsl").HasColumnType("bit").IsRequired();
            Property(x => x.IsDefault).HasColumnName(@"IsDefault").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // EmailSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class EmailSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmailSet>
    {
        public EmailSetConfiguration()
            : this("dbo")
        {
        }

        public EmailSetConfiguration(string schema)
        {
            ToTable("EmailSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailTo).HasColumnName(@"MailTo").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.MailCc).HasColumnName(@"MailCc").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.Readed).HasColumnName(@"Readed").HasColumnType("bit").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // EmailTemplateSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class EmailTemplateSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmailTemplateSet>
    {
        public EmailTemplateSetConfiguration()
            : this("dbo")
        {
        }

        public EmailTemplateSetConfiguration(string schema)
        {
            ToTable("EmailTemplateSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.TemplateNo).HasColumnName(@"TemplateNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.EmailAccountId).HasColumnName(@"EmailAccountId").HasColumnType("int").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
        }
    }

    // FilterTemplateSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FilterTemplateSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<FilterTemplateSet>
    {
        public FilterTemplateSetConfiguration()
            : this("dbo")
        {
        }

        public FilterTemplateSetConfiguration(string schema)
        {
            ToTable("FilterTemplateSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Author).HasColumnName(@"Author").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.PublishDate).HasColumnName(@"PublishDate").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Keyword).HasColumnName(@"Keyword").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
            Property(x => x.Source).HasColumnName(@"Source").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.LinksContainer).HasColumnName(@"LinksContainer").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Links).HasColumnName(@"Links").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.KeywordSet).HasColumnName(@"KeywordSet").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Encode).HasColumnName(@"Encode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
        }
    }

    // GoodsCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class GoodsCategorySetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GoodsCategorySet>
    {
        public GoodsCategorySetConfiguration()
            : this("dbo")
        {
        }

        public GoodsCategorySetConfiguration(string schema)
        {
            ToTable("GoodsCategorySet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.SeoName).HasColumnName(@"SeoName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Recommend).HasColumnName(@"Recommend").HasColumnType("bit").IsRequired();
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
        }
    }

    // GoodsPhotoSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class GoodsPhotoSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GoodsPhotoSet>
    {
        public GoodsPhotoSetConfiguration()
            : this("dbo")
        {
        }

        public GoodsPhotoSetConfiguration(string schema)
        {
            ToTable("GoodsPhotoSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.GoodsId).HasColumnName(@"GoodsId").HasColumnType("int").IsRequired();
            Property(x => x.ImageUrl).HasColumnName(@"ImageURL").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);

            // Foreign keys
            HasRequired(a => a.GoodsSet).WithMany(b => b.GoodsPhotoSets).HasForeignKey(c => c.GoodsId).WillCascadeOnDelete(false); // FK_GoodsGoodsPhoto
        }
    }

    // GoodsSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class GoodsSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GoodsSet>
    {
        public GoodsSetConfiguration()
            : this("dbo")
        {
        }

        public GoodsSetConfiguration(string schema)
        {
            ToTable("GoodsSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Price).HasColumnName(@"Price").HasColumnType("decimal").IsRequired().HasPrecision(18,2);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.FullDescription).HasColumnName(@"FullDescription").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ViewCount).HasColumnName(@"ViewCount").HasColumnType("int").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasRequired(a => a.GoodsCategorySet).WithMany(b => b.GoodsSets).HasForeignKey(c => c.CategoryId).WillCascadeOnDelete(false); // FK_GoodsSet_GoodsCategorySet
        }
    }

    // Institutes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class InstituteConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Institute>
    {
        public InstituteConfiguration()
            : this("dbo")
        {
        }

        public InstituteConfiguration(string schema)
        {
            ToTable("Institutes", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.DictionaryId).HasColumnName(@"DictionaryId").HasColumnType("int").IsRequired();
            Property(x => x.Introduction).HasColumnName(@"Introduction").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // Jobs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class JobConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Job>
    {
        public JobConfiguration()
            : this("dbo")
        {
        }

        public JobConfiguration(string schema)
        {
            ToTable("Jobs", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Post).HasColumnName(@"Post").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Category).HasColumnName(@"Category").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsOptional();
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.SeoName).HasColumnName(@"SeoName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // Laboratories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class LaboratoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Laboratory>
    {
        public LaboratoryConfiguration()
            : this("dbo")
        {
        }

        public LaboratoryConfiguration(string schema)
        {
            ToTable("Laboratories", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.InstituteId).HasColumnName(@"InstituteId").HasColumnType("int").IsRequired();
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);

            // Foreign keys
            HasRequired(a => a.Institute).WithMany(b => b.Laboratories).HasForeignKey(c => c.InstituteId).WillCascadeOnDelete(false); // FK_Laboratories_Institutes
        }
    }

    // LinkCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class LinkCategorySetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LinkCategorySet>
    {
        public LinkCategorySetConfiguration()
            : this("dbo")
        {
        }

        public LinkCategorySetConfiguration(string schema)
        {
            ToTable("LinkCategorySet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.ParentCategoryId).HasColumnName(@"ParentCategoryId").HasColumnType("int").IsOptional();
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
        }
    }

    // LinkSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class LinkSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LinkSet>
    {
        public LinkSetConfiguration()
            : this("dbo")
        {
        }

        public LinkSetConfiguration(string schema)
        {
            ToTable("LinkSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.WebLink).HasColumnName(@"WebLink").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsOptional();
            Property(x => x.LogoUrl).HasColumnName(@"LogoUrl").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
        }
    }

    // Logs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class LogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Log>
    {
        public LogConfiguration()
            : this("dbo")
        {
        }

        public LogConfiguration(string schema)
        {
            ToTable("Logs", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("datetime").IsRequired();
            Property(x => x.Thread).HasColumnName(@"Thread").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.Level).HasColumnName(@"Level").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Logger).HasColumnName(@"Logger").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.Message).HasColumnName(@"Message").HasColumnType("nvarchar").IsRequired().HasMaxLength(4000);
            Property(x => x.Exception).HasColumnName(@"Exception").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // MenuCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class MenuCategorySetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MenuCategorySet>
    {
        public MenuCategorySetConfiguration()
            : this("dbo")
        {
        }

        public MenuCategorySetConfiguration(string schema)
        {
            ToTable("MenuCategorySet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.IsSys).HasColumnName(@"IsSys").HasColumnType("bit").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // MenuSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class MenuSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MenuSet>
    {
        public MenuSetConfiguration()
            : this("dbo")
        {
        }

        public MenuSetConfiguration(string schema)
        {
            ToTable("MenuSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Hidden).HasColumnName(@"Hidden").HasColumnType("bit").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.Iconfont).HasColumnName(@"Iconfont").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("int").IsOptional();
            Property(x => x.MenuType).HasColumnName(@"MenuType").HasColumnType("smallint").IsOptional();
            Property(x => x.Area).HasColumnName(@"Area").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Controller).HasColumnName(@"Controller").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Action).HasColumnName(@"Action").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.IsExpand).HasColumnName(@"IsExpand").HasColumnType("bit").IsRequired();
            Property(x => x.LayoutLevel).HasColumnName(@"LayoutLevel").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Parent).WithMany(b => b.MenuSets).HasForeignKey(c => c.ParentId).WillCascadeOnDelete(false); // FK_dbo.Menus_dbo.Menus_ParentId
            HasRequired(a => a.MenuCategorySet).WithMany(b => b.MenuSets).HasForeignKey(c => c.CategoryId); // FK_MenuSet_MenuCategorySet
            HasMany(t => t.Roles).WithMany(t => t.MenuSets).Map(m =>
            {
                m.ToTable("RoleMenus", "dbo");
                m.MapLeftKey("MenuId");
                m.MapRightKey("RoleId");
            });
        }
    }

    // OrderDetailSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class OrderDetailSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OrderDetailSet>
    {
        public OrderDetailSetConfiguration()
            : this("dbo")
        {
        }

        public OrderDetailSetConfiguration(string schema)
        {
            ToTable("OrderDetailSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.OrderId).HasColumnName(@"OrderId").HasColumnType("int").IsRequired();
            Property(x => x.GoodsId).HasColumnName(@"GoodsId").HasColumnType("int").IsRequired();
            Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired();
            Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("decimal").IsRequired().HasPrecision(18,2);

            // Foreign keys
            HasRequired(a => a.OrderSet).WithMany(b => b.OrderDetailSets).HasForeignKey(c => c.OrderId); // FK_OrderDetailSet_OrderSet
        }
    }

    // OrderSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class OrderSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<OrderSet>
    {
        public OrderSetConfiguration()
            : this("dbo")
        {
        }

        public OrderSetConfiguration(string schema)
        {
            ToTable("OrderSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.RealName).HasColumnName(@"RealName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar").IsRequired().HasMaxLength(250);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.State).HasColumnName(@"State").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Country).HasColumnName(@"Country").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Total).HasColumnName(@"Total").HasColumnType("decimal").IsRequired().HasPrecision(18,2);
            Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired();
        }
    }

    // Outlets
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class OutletConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Outlet>
    {
        public OutletConfiguration()
            : this("dbo")
        {
        }

        public OutletConfiguration(string schema)
        {
            ToTable("Outlets", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.Coordinate).HasColumnName(@"Coordinate").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ContactMan).HasColumnName(@"ContactMan").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // PageMetas
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class PageMetaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PageMeta>
    {
        public PageMetaConfiguration()
            : this("dbo")
        {
        }

        public PageMetaConfiguration(string schema)
        {
            ToTable("PageMetas", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ModelType).HasColumnName(@"ModelType").HasColumnType("smallint").IsRequired();
            Property(x => x.ObjectId).HasColumnName(@"ObjectId").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Keyword).HasColumnName(@"Keyword").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
        }
    }

    // PageSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class PageSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PageSet>
    {
        public PageSetConfiguration()
            : this("dbo")
        {
        }

        public PageSetConfiguration(string schema)
        {
            ToTable("PageSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.SeoName).HasColumnName(@"SeoName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.ViewCount).HasColumnName(@"ViewCount").HasColumnType("int").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.TemplateName).HasColumnName(@"TemplateName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.HeadCode).HasColumnName(@"HeadCode").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.FooterCode).HasColumnName(@"FooterCode").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // Photos
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class PhotoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Photo>
    {
        public PhotoConfiguration()
            : this("dbo")
        {
        }

        public PhotoConfiguration(string schema)
        {
            ToTable("Photos", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.AlbumId).HasColumnName(@"AlbumId").HasColumnType("int").IsRequired();
            Property(x => x.FullImageUrl).HasColumnName(@"FullImageURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);

            // Foreign keys
            HasRequired(a => a.Album).WithMany(b => b.Photos).HasForeignKey(c => c.AlbumId).WillCascadeOnDelete(false); // FK_AlbumPhoto
        }
    }

    // PositionSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class PositionSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PositionSet>
    {
        public PositionSetConfiguration()
            : this("dbo")
        {
        }

        public PositionSetConfiguration(string schema)
        {
            ToTable("PositionSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Sketch).HasColumnName(@"Sketch").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ImageHeight).HasColumnName(@"ImageHeight").HasColumnType("int").IsRequired();
            Property(x => x.ImageWidth).HasColumnName(@"ImageWidth").HasColumnType("int").IsRequired();
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // PostCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class PostCategorySetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostCategorySet>
    {
        public PostCategorySetConfiguration()
            : this("dbo")
        {
        }

        public PostCategorySetConfiguration(string schema)
        {
            ToTable("PostCategorySet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SeoName).HasColumnName(@"SeoName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // PostSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class PostSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PostSet>
    {
        public PostSetConfiguration()
            : this("dbo")
        {
        }

        public PostSetConfiguration(string schema)
        {
            ToTable("PostSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"title").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Summary).HasColumnName(@"Summary").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Keywords).HasColumnName(@"Keywords").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.ViewCount).HasColumnName(@"ViewCount").HasColumnType("int").IsRequired();
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Recommend).HasColumnName(@"Recommend").HasColumnType("bit").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
        }
    }

    // Products
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ProductConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Product>
    {
        public ProductConfiguration()
            : this("dbo")
        {
        }

        public ProductConfiguration(string schema)
        {
            ToTable("Products", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductNo).HasColumnName(@"ProductNo").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Summary).HasColumnName(@"Summary").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Introduction).HasColumnName(@"Introduction").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ImageUrl).HasColumnName(@"ImageUrl").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Cover).HasColumnName(@"Cover").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ViewImage).HasColumnName(@"ViewImage").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Recommend).HasColumnName(@"Recommend").HasColumnType("bit").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ViewCount).HasColumnName(@"ViewCount").HasColumnType("int").IsRequired();
            Property(x => x.Keywords).HasColumnName(@"Keywords").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // ProductCategories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ProductCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductCategory>
    {
        public ProductCategoryConfiguration()
            : this("dbo")
        {
        }

        public ProductCategoryConfiguration(string schema)
        {
            ToTable("ProductCategories", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("int").IsOptional();
            Property(x => x.IconName).HasColumnName(@"IconName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.SeoName).HasColumnName(@"SeoName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ImageUrl).HasColumnName(@"ImageUrl").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.Parent).WithMany(b => b.ProductCategories).HasForeignKey(c => c.ParentId).WillCascadeOnDelete(false); // FK_dbo.Categories_dbo.Categories_ParentId
            HasMany(t => t.Products).WithMany(t => t.ProductCategories).Map(m =>
            {
                m.ToTable("ProductWithCategory", "dbo");
                m.MapLeftKey("CategoryId");
                m.MapRightKey("ProductId");
            });
        }
    }

    // ProductPhotoSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ProductPhotoSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductPhotoSet>
    {
        public ProductPhotoSetConfiguration()
            : this("dbo")
        {
        }

        public ProductPhotoSetConfiguration(string schema)
        {
            ToTable("ProductPhotoSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ImgUrl).HasColumnName(@"ImgURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.ProductId).HasColumnName(@"ProductId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.ProductPhotoSets).HasForeignKey(c => c.ProductId); // FK_ProductPhotos_Products
        }
    }

    // QuestionCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class QuestionCategorySetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionCategorySet>
    {
        public QuestionCategorySetConfiguration()
            : this("dbo")
        {
        }

        public QuestionCategorySetConfiguration(string schema)
        {
            ToTable("QuestionCategorySet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // QuestionSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class QuestionSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<QuestionSet>
    {
        public QuestionSetConfiguration()
            : this("dbo")
        {
        }

        public QuestionSetConfiguration(string schema)
        {
            ToTable("QuestionSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(500);
            Property(x => x.Answer).HasColumnName(@"Answer").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.QuestionCategorySet).WithMany(b => b.QuestionSets).HasForeignKey(c => c.CategoryId).WillCascadeOnDelete(false); // FK_QuestionSet_QuestionCategorySet
        }
    }

    // RecipientInfoSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class RecipientInfoSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RecipientInfoSet>
    {
        public RecipientInfoSetConfiguration()
            : this("dbo")
        {
        }

        public RecipientInfoSetConfiguration(string schema)
        {
            ToTable("RecipientInfoSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProvinceId).HasColumnName(@"ProvinceId").HasColumnType("int").IsRequired();
            Property(x => x.CityId).HasColumnName(@"CityId").HasColumnType("int").IsOptional();
            Property(x => x.DistrictId).HasColumnName(@"DistrictId").HasColumnType("int").IsOptional();
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar").IsRequired().HasMaxLength(250);
            Property(x => x.Postcode).HasColumnName(@"Postcode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Recipient).HasColumnName(@"Recipient").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.IsDefault).HasColumnName(@"IsDefault").HasColumnType("bit").IsOptional();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(10);

            // Foreign keys
            HasOptional(a => a.TCity).WithMany(b => b.RecipientInfoSets).HasForeignKey(c => c.CityId).WillCascadeOnDelete(false); // FK_RecipientInfoSet_T_City
            HasOptional(a => a.TDistrict).WithMany(b => b.RecipientInfoSets).HasForeignKey(c => c.DistrictId).WillCascadeOnDelete(false); // FK_RecipientInfoSet_T_District
            HasRequired(a => a.TProvince).WithMany(b => b.RecipientInfoSets).HasForeignKey(c => c.ProvinceId).WillCascadeOnDelete(false); // FK_RecipientInfoSet_T_Province
        }
    }

    // ReservationSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class ReservationSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReservationSet>
    {
        public ReservationSetConfiguration()
            : this("dbo")
        {
        }

        public ReservationSetConfiguration(string schema)
        {
            ToTable("ReservationSet", schema);
            HasKey(x => new { x.VideoId, x.OpenId });

            Property(x => x.VideoId).HasColumnName(@"VideoId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OpenId).HasColumnName(@"OpenId").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.NoticedDate).HasColumnName(@"NoticedDate").HasColumnType("datetime").IsOptional();
        }
    }

    // Roles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class RoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Role>
    {
        public RoleConfiguration()
            : this("dbo")
        {
        }

        public RoleConfiguration(string schema)
        {
            ToTable("Roles", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IsSys).HasColumnName(@"IsSys").HasColumnType("bit").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
            HasMany(t => t.Users).WithMany(t => t.Roles).Map(m =>
            {
                m.ToTable("UserRoles", "dbo");
                m.MapLeftKey("RoleId");
                m.MapRightKey("UserId");
            });
        }
    }

    // SimpleProducts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class SimpleProductConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SimpleProduct>
    {
        public SimpleProductConfiguration()
            : this("dbo")
        {
        }

        public SimpleProductConfiguration(string schema)
        {
            ToTable("SimpleProducts", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductNo).HasColumnName(@"ProductNo").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.ProductName).HasColumnName(@"ProductName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Summary).HasColumnName(@"Summary").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Parameters).HasColumnName(@"Parameters").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Specific).HasColumnName(@"Specific").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Controls).HasColumnName(@"Controls").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Videos).HasColumnName(@"Videos").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ImageUrl).HasColumnName(@"ImageUrl").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.ViewCount).HasColumnName(@"ViewCount").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
            Property(x => x.Recommend).HasColumnName(@"Recommend").HasColumnType("bit").IsOptional();
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
        }
    }

    // SolutionSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class SolutionSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SolutionSet>
    {
        public SolutionSetConfiguration()
            : this("dbo")
        {
        }

        public SolutionSetConfiguration(string schema)
        {
            ToTable("SolutionSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.FontIcon).HasColumnName(@"FontIcon").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // T_City
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class TCityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TCity>
    {
        public TCityConfiguration()
            : this("dbo")
        {
        }

        public TCityConfiguration(string schema)
        {
            ToTable("T_City", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.ProvinceId).HasColumnName(@"ProvinceId").HasColumnType("int").IsOptional();
            Property(x => x.Sort).HasColumnName(@"Sort").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.TProvince).WithMany(b => b.TCities).HasForeignKey(c => c.ProvinceId).WillCascadeOnDelete(false); // FK_T_City_T_Province
        }
    }

    // T_District
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class TDistrictConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TDistrict>
    {
        public TDistrictConfiguration()
            : this("dbo")
        {
        }

        public TDistrictConfiguration(string schema)
        {
            ToTable("T_District", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.CityId).HasColumnName(@"CityId").HasColumnType("int").IsRequired();
            Property(x => x.Sort).HasColumnName(@"Sort").HasColumnType("int").IsOptional();

            // Foreign keys
            HasRequired(a => a.TCity).WithMany(b => b.TDistricts).HasForeignKey(c => c.CityId).WillCascadeOnDelete(false); // FK_T_District_T_City
        }
    }

    // TeamSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class TeamSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TeamSet>
    {
        public TeamSetConfiguration()
            : this("dbo")
        {
        }

        public TeamSetConfiguration(string schema)
        {
            ToTable("TeamSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.PhotoUrl).HasColumnName(@"PhotoUrl").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Post).HasColumnName(@"Post").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // TechnologySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class TechnologySetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TechnologySet>
    {
        public TechnologySetConfiguration()
            : this("dbo")
        {
        }

        public TechnologySetConfiguration(string schema)
        {
            ToTable("TechnologySet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.EnglishTitle).HasColumnName(@"EnglishTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.ImagesUrl).HasColumnName(@"ImagesURL").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.ProductId).HasColumnName(@"ProductId").HasColumnType("int").IsRequired();
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.TechnologySets).HasForeignKey(c => c.ProductId); // FK_Technologys_Products
        }
    }

    // T_Province
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class TProvinceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TProvince>
    {
        public TProvinceConfiguration()
            : this("dbo")
        {
        }

        public TProvinceConfiguration(string schema)
        {
            ToTable("T_Province", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Sort).HasColumnName(@"Sort").HasColumnType("int").IsOptional();
            Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("Users", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.SecurityStamp).HasColumnName(@"SecurityStamp").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.RealName).HasColumnName(@"RealName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.PhotoUrl).HasColumnName(@"PhotoUrl").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("datetime").IsRequired();
            Property(x => x.LastActivityDate).HasColumnName(@"LastActivityDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Birthday).HasColumnName(@"Birthday").HasColumnType("datetime").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("smallint").IsOptional();
            Property(x => x.Qq).HasColumnName(@"QQ").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // UserSafetySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class UserSafetySetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserSafetySet>
    {
        public UserSafetySetConfiguration()
            : this("dbo")
        {
        }

        public UserSafetySetConfiguration(string schema)
        {
            ToTable("UserSafetySet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.EmailType).HasColumnName(@"EmailType").HasColumnType("smallint").IsRequired();
            Property(x => x.Timeout).HasColumnName(@"Timeout").HasColumnType("int").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
        }
    }

    // VideoCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class VideoCategorySetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VideoCategorySet>
    {
        public VideoCategorySetConfiguration()
            : this("dbo")
        {
        }

        public VideoCategorySetConfiguration(string schema)
        {
            ToTable("VideoCategorySet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SeoName).HasColumnName(@"SeoName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // VideoSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class VideoSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VideoSet>
    {
        public VideoSetConfiguration()
            : this("dbo")
        {
        }

        public VideoSetConfiguration(string schema)
        {
            ToTable("VideoSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.VideoUrl).HasColumnName(@"VideoUrl").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsRequired();
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Summary).HasColumnName(@"Summary").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
        }
    }

    // WorkCategorySet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class WorkCategorySetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WorkCategorySet>
    {
        public WorkCategorySetConfiguration()
            : this("dbo")
        {
        }

        public WorkCategorySetConfiguration(string schema)
        {
            ToTable("WorkCategorySet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Importance).HasColumnName(@"Importance").HasColumnType("int").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsOptional();
            Property(x => x.SeoName).HasColumnName(@"SeoName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ImageUrl).HasColumnName(@"ImageUrl").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            HasMany(t => t.WorkSets).WithMany(t => t.WorkCategorySets).Map(m =>
            {
                m.ToTable("WorkWorkCategorySet", "dbo");
                m.MapLeftKey("CategoryId");
                m.MapRightKey("WorkId");
            });
        }
    }

    // WorkSet
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class WorkSetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WorkSet>
    {
        public WorkSetConfiguration()
            : this("dbo")
        {
        }

        public WorkSetConfiguration(string schema)
        {
            ToTable("WorkSet", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Body).HasColumnName(@"Body").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Abstract).HasColumnName(@"Abstract").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
            Property(x => x.FinishYear).HasColumnName(@"FinishYear").HasColumnType("int").IsOptional();
            Property(x => x.Thumbnail).HasColumnName(@"Thumbnail").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Imageurl).HasColumnName(@"Imageurl").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Demourl).HasColumnName(@"Demourl").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.Viewcount).HasColumnName(@"Viewcount").HasColumnType("int").IsRequired();
            Property(x => x.Keywords).HasColumnName(@"Keywords").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Recommend).HasColumnName(@"Recommend").HasColumnType("bit").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CategoryIds).HasColumnName(@"CategoryIds").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SolutionId).HasColumnName(@"SolutionId").HasColumnType("int").IsOptional();
            Property(x => x.ClientId).HasColumnName(@"ClientId").HasColumnType("int").IsOptional();
        }
    }

    #endregion

}
// </auto-generated>

