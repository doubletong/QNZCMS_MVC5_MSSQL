@model CompanyIM
@{
    ViewBag.Title = "公司资料";
    ViewBag.PageTitle = ViewBag.Title + "_常规设置";
}

@section Header{

}


<div class="panel panel-default">
    <div class="panel-body">
        <!-- Nav tabs -->
       

        <div role="tabpanel" class="tab-pane active" id="home">
            @using (Ajax.BeginForm("Company", null, new AjaxOptions()
            {
                OnBegin = "onBegin",
                OnComplete = "onComplete",
                //   Confirm = "Are you sure you want to save this User?"
                OnSuccess = "onSuccess"

            }, new { @class = "form-horizontal", role = "form" }))
            {

                @Html.AntiForgeryToken()
                @Html.ValidationSummary()




                <div class="form-group">
                    @Html.LabelFor(model => model.CompanyName, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control", placeholder = "公司名称" })
                        @Html.ValidationMessageFor(model => model.CompanyName)
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CompanyShortName, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.CompanyShortName, new { @class = "form-control", placeholder = "公司简称" })
                        @Html.ValidationMessageFor(model => model.CompanyShortName)
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextAreaFor(model => model.Address, new { @class = "form-control", placeholder = "公司地址" })
                        @Html.ValidationMessageFor(model => model.Address)
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Coordinate, new { @class = "col-md-2 control-label" })
                    <div class="col-sm-5">
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.Coordinate, new { @class = "form-control", placeholder = ModelMetadata.FromLambdaExpression(x => x.Coordinate, ViewData).Watermark })
                            <span class="input-group-btn">
                                <button class="btn btn-default" type="button" data-toggle="modal" data-target="#myModal"><span class="glyphicon glyphicon-map-marker"></span> 坐标拾取</button>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(model => model.Coordinate)
                    </div>

                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.ContactMan, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.ContactMan, new { @class = "form-control", placeholder = "联系人" })
                        @Html.ValidationMessageFor(model => model.ContactMan)
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Mobile, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.Mobile, new { @class = "form-control", placeholder = "手机" })
                        @Html.ValidationMessageFor(model => model.Mobile)
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Phone, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", placeholder = "电话" })
                        @Html.ValidationMessageFor(model => model.Phone)
                    </div>

                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.Fax, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.Fax, new { @class = "form-control", placeholder = "传真" })
                        @Html.ValidationMessageFor(model => model.Fax)
                    </div>

                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.ZipCode, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.ZipCode, new { @class = "form-control", placeholder = "邮政编码" })
                        @Html.ValidationMessageFor(model => model.ZipCode)
                    </div>

                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.Email, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control", placeholder = "邮箱" })
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email2, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.Email2, new { @class = "form-control", placeholder = "邮箱2" })
                        @Html.ValidationMessageFor(model => model.Email2)
                    </div>

                </div>
                <hr />


                <div class="form-group">
                    @Html.LabelFor(model => model.Facebook, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.Facebook, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Facebook)
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LinkedIn, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.LinkedIn, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LinkedIn)
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Youtube, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.Youtube, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Youtube)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Oicq, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.Oicq, new { @class = "form-control", placeholder = ModelMetadata.FromLambdaExpression(x => x.Oicq, ViewData).Watermark })
                        @Html.ValidationMessageFor(model => model.Oicq)
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.OicqTwo, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.OicqTwo, new { @class = "form-control", placeholder = ModelMetadata.FromLambdaExpression(x => x.OicqTwo, ViewData).Watermark })
                        @Html.ValidationMessageFor(model => model.OicqTwo)
                    </div>

                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.SinaWeibo, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.SinaWeibo, new { @class = "form-control", placeholder = "新浪微博" })
                        @Html.ValidationMessageFor(model => model.SinaWeibo)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.WeiXing, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.WeiXing, new { @class = "form-control", placeholder = "微信帐号" })
                        @Html.ValidationMessageFor(model => model.WeiXing)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.WeiXingCode, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">

                        <div class="input-group">
                            @Html.TextBoxFor(model => model.WeiXingCode, new { @class = "form-control", placeholder = "微信二维码" })
                            <div class="input-group-btn">
                                <button class="btn btn-default" id="btnWeiXingCode" type="button">浏览…</button>
                                @if (!string.IsNullOrEmpty(Model.WeiXingCode))
                                {
                                    <button type="button" class="btn btn-default" data-container="body" data-html="true"
                                            data-toggle="popover" data-placement="top" data-content="<img src='@Model.WeiXingCode'/>">
                                        <i class="fa fa-qrcode"></i>
                                    </button>
                                }

                            </div>
                        </div>

                        @Html.ValidationMessageFor(model => model.WeiXingCode)
                    </div>

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.WeiXing2, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">
                        @Html.TextBoxFor(model => model.WeiXing2, new { @class = "form-control", placeholder = "微信帐号" })
                        @Html.ValidationMessageFor(model => model.WeiXing2)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.WeiXingCode2, new { @class = "col-md-2 control-label" })
                    <div class="col-md-5">

                        <div class="input-group">
                            @Html.TextBoxFor(model => model.WeiXingCode2, new { @class = "form-control", placeholder = "微信二维码" })
                            <div class="input-group-btn">
                                <button class="btn btn-default" id="btnWeiXingCode2" type="button">浏览…</button>
                                @if (!string.IsNullOrEmpty(Model.WeiXingCode2))
                                {
                                    <button type="button" class="btn btn-default" data-container="body" data-html="true"
                                            data-toggle="popover" data-placement="top" data-content="<img src='@Model.WeiXingCode2'/>">
                                        <i class="fa fa-qrcode"></i>
                                    </button>
                                }

                            </div>
                        </div>

                        @Html.ValidationMessageFor(model => model.WeiXingCode2)
                    </div>

                </div>

                <div class="form-group">
                    <div class="col-sm-offset-2 col-md-3">
                        <button type="submit" class="btn btn-primary" id="btnSave"><i class="fa fa-save fa-fw"></i>保存</button>
                    </div>

                </div>
            }
        </div>
          
        </div>


</div>



<!-- Modal 百度地图 -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="myModalLabel"><span class="glyphicon glyphicon-map-marker"></span> 百度地图坐标拾取</h4>
            </div>
            <div class="modal-body">
                <div id="allmap" style="width:100%;height:450px;"></div>
                <span class="help-block">
                    *点击地图，会自动获取所点击目标的坐标。
                </span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">确定</button>
            </div>
        </div>
    </div>
</div>
<!-- end main container -->


@section footer {
    @Scripts.Render("~/bundles/jqueryvalWithBootstrap")


    <script src="http://api.map.baidu.com/api?v=2.0&ak=G7h0sKsr60IFU3OrHRmKTRzD"></script>

    <script>

        // 百度地图API功能
        var map = new BMap.Map("allmap");

        map.enableScrollWheelZoom(true);
        map.addControl(new BMap.NavigationControl());

        var currentPoint = $('#Coordinate').val();
        if (currentPoint.length > 0) {
            var pt = currentPoint.split(",");
            // alert(parseFloat(pt[0]));
            // alert(parseFloat(pt[1]));
            var point = new BMap.Point(parseFloat(pt[0]), parseFloat(pt[1]));
            map.centerAndZoom(point, 12);
            var marker = new BMap.Marker(point);// 创建标注
            map.addOverlay(marker);             // 将标注添加到地图中

            marker.addEventListener("dragend", function (e) {
                // alert("当前位置：" + e.point.lng + ", " + e.point.lat);
                $('#Coordinate').val(e.point.lng + ", " + e.point.lat);
            });

        } else {

            var point = new BMap.Point(116.331398, 39.897445);
            map.centerAndZoom(point, 12);

            function myFun(result) {
                var cityName = result.name;
                map.setCenter(cityName);
            }
            var myCity = new BMap.LocalCity();
            myCity.get(myFun);
        }



        map.addEventListener("click", function (e) {
            // alert(e.point.lng + "," + e.point.lat);
            map.clearOverlays();
            var marker = new BMap.Marker(e.point);// 创建标注
            map.addOverlay(marker);  // 将标注添加到地图中
            marker.enableDragging();

            var p = marker.getPosition();       //获取marker的位置
            // alert("marker的位置是" + p.lng + "," + p.lat);
            $('#Coordinate').val(p.lng + "," + p.lat);

            marker.addEventListener("dragend", function (e) {
                // alert("当前位置：" + e.point.lng + ", " + e.point.lat);
                $('#Coordinate').val(e.point.lng + ", " + e.point.lat);
            })
        });



    </script>

    <script>
        function SetThumbnail(fileUrl) {
       //     var fileUrl = $("#fileList .item.active").attr("data-file");
            $('#WeiXingCode').val(fileUrl);
       //     $('#fileManagerModal').modal('hide');
        }

        function SetThumbnail2(fileUrl) {
            //var fileUrl = $("#fileList .item.active").attr("data-file");
            $('#WeiXingCode2').val(fileUrl);
            //$('#fileManagerModal').modal('hide');
        }

        function onBegin() {
            $("#btnSave i").removeClass("fa-save").addClass("fa-spinner fa-spin")
        }
        function onComplete() {
            $("#btnSave i").removeClass("fa-spinner fa-spin").addClass("fa-save")
        }

        function onBegin1() {
            $("#btnSave1 i").removeClass("fa-save").addClass("fa-spinner fa-spin")
        }
        function onComplete1() {
            $("#btnSave1 i").removeClass("fa-spinner fa-spin").addClass("fa-save")
        }

        function onSuccess(data) {
            Common.ShowBox(data.Status, data.Message, "@ViewBag.Title");
            //  debugger;
        }



       $.validator.addMethod('qq', function(value, element)
       {
           if(value.length>0)
               return /^[1-9][0-9]{4,9}$/.test(value)
           return true;
       });
       $.validator.unobtrusive.adapters.addBool("qq");

       $.validator.addMethod('chinamobile', function (value, element) {
           if (value.length > 0)
               return /^0{0,1}(13[0-9]|15[7-9]|153|156|170|178|18[0-9])[0-9]{8}$/.test(value)
           return true;
       });

       $.validator.unobtrusive.adapters.addBool("chinamobile");

       $.validator.addMethod('coordinate', function (value, element) {
           if (value.length > 0)
               return /^[0-9]+(\.[0-9]+),[0-9]+(\.[0-9]+)$/.test(value)
           return true;
       });

       $.validator.unobtrusive.adapters.addBool("coordinate");

        $(function () {

            $("#btnWeiXingCode").on("click", function () {
                singleEelFinder.selectActionFunction = SetThumbnail;
                singleEelFinder.open();           
            });

            $("#btnWeiXingCode2").on("click", function () {
                singleEelFinder.selectActionFunction = SetThumbnail2;
                singleEelFinder.open();     
            });

            $('[data-toggle="popover"]').popover()

        });
    </script>
}